import{_ as s,o as a,c as n,O as l}from"./chunks/framework.571309da.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/SpringMVC/数据校验.md","filePath":"guide/SpringMVC/数据校验.md","lastUpdated":1689152321000}'),p={name:"guide/SpringMVC/数据校验.md"},t=l(`<p>一般情况下，用户的输入是随意的，为了保证数据的合法性，数据验证是所有 Web 应用必须处理的问题。</p><p>Spring MVC 有以下两种方法可以验证输入：</p><ul><li>1.利用 Spring 自带的验证框架(复杂，推荐spring-boot-starter-validation)</li></ul><p>2.利用 JSR 303 实现</p><p>数据验证分为客户端验证和服务器端验证，客户端验证主要是过滤正常用户的误操作，通过 JavaScript 代码完成。服务器端验证是整个应用阻止非法数据的最后防线，通过在应用中编程实现。</p><p>本节使用 JSR 303 实现服务器端的数据验证。</p><blockquote><p>关于JSRJSR是Java Specification Requests的缩写，意思是Java 规范提案。是指向JCP(Java Community Process)提出新增一个标准化技术规范的正式请求。任何人都可以提交JSR，以向Java平台增添新的API和服务。JSR已成为Java界的一个重要标准。关于 JSR-303JSR-303 是JAVA EE 6 中的一项子规范，叫做Bean Validation，Hibernate Validator 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，除此之外还有一些附加的 constraint。</p></blockquote><p>JSR 303 是 Java 为 Bean 数据合法性校验所提供的标准框架。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对 Bean 进行验证。可以通过 <a href="https://jcp.org/en/jsr/detail?id=303" target="_blank" rel="noreferrer">https://jcp.org/en/jsr/detail?id=303</a> 查看详细内容并下载 JSR 303 Bean Validation。</p><p>JSR 303 不需要编写验证器，它定义了一套可标注在成员变量、属性方法上的校验注解，如下表所示。只针对对象属性的校验**</p><table><thead><tr><th>注解</th><th>含义</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为false</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max=, min=)</td><td>被注释的元素的字符串长度大小必须在指定的范围内</td></tr><tr><td>@Digits (integer,fraction)</td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td>@Pattern(regex=,flag=)</td><td>被注释的元素必须符合指定的正则表达式 Hibernate Validator附加的constraint</td></tr><tr><td>@NotBlank(message =)</td><td>验证字符串非null，且长度必须大于0</td></tr><tr><td>@Email</td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td>@Length(min=,max=)</td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注释的字符串的必须非空</td></tr><tr><td>@Range(min=,max=,message=)</td><td>被注释的元素必须在合适的数字范围内</td></tr></tbody></table><p>Spring MVC 支持 JSR 303 标准的校验框架，Spring 的 DataBinder 在进行数据绑定<em>时，可同时调用校验框架来完成数据校验工作，（当发生错误时候触发</em>BindException）非常简单方便。在 Spring MVC 中，可以直接通过注解驱动的方式来进行数据校验。</p><p>Spring 本身没有提供 JSR 303 的实现，Hibernate Validator 实现了 JSR 303，所以必须在项目中加入来自 Hibernate Validator 库的 jar 文件，下载地址为 <a href="http://hibernate.org/validator/" target="_blank" rel="noreferrer">http://hibernate.org/validator/</a></p><p>maven依赖</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;version&gt;6.2.3.Final&lt;/version&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/dependency&gt;</span></span></code></pre></div><p>效验：在product类中对实体进行效验</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">private Integer id;</span></span>
<span class="line"><span style="color:#A6ACCD;">    @NotEmpty(message = &quot;name不能为空&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    private String name;</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    private BigDecimal price;</span></span>
<span class="line"><span style="color:#A6ACCD;">    //第一种方式：</span></span>
<span class="line"><span style="color:#A6ACCD;">    //@Min(value=5,message=&quot;数量最小为5&quot;)    </span></span>
<span class="line"><span style="color:#A6ACCD;">    //@MAx(value=100,message=&quot;数量最大为100&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    //第二种方式</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Range(min = 5,max = 10,message = &quot;大小必须在这个范围内&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    private Integer qty;</span></span>
<span class="line"><span style="color:#A6ACCD;">    private List&lt;String&gt; address;</span></span>
<span class="line"><span style="color:#A6ACCD;">    private String email;</span></span>
<span class="line"><span style="color:#A6ACCD;">    private String idCard;</span></span></code></pre></div><p>在TeacherController中编辑controller：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@RestController</span></span>
<span class="line"><span style="color:#A6ACCD;">@RequestMapping(&quot;/api/teacher&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class TeacherController {</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 做数据效验 必须加上这个 @Valid注解 不然不显示结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    @PostMapping</span></span>
<span class="line"><span style="color:#A6ACCD;">    public Integer insert(@RequestBody @Valid Product product){</span></span>
<span class="line"><span style="color:#A6ACCD;">        return 1;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>运行测试：</p><p>把拦截器给注释掉：运行测试一下：</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112v6eaa9525f55db8848c5715f0d3945621?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4OTc0NTcyNCwiaWF0IjoxNjg5MTQwOTI0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnY2ZWFhOTUyNWY1NWRiODg0OGM1NzE1ZjBkMzk0NTYyMSJ9.ldIZtXfz9PjLoF_3aD_X_v46dhz59G9xIbNhJR7-POc&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>如果想在控制台显示异常信息，可以debug一下看看是什么异常</p><p>异常配置：<strong>第一种方式：统一的处理</strong></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">ExceptionHandler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">BindException</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">processException</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">BindException</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">BindingResult</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBindingResult</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">StringBuilder</span><span style="color:#A6ACCD;"> sb</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StringBuilder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">ObjectError</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> allError</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getAllErrors</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ObjectError</span><span style="color:#A6ACCD;"> error </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> allError</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDefaultMessage</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> sb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>测试运行：</strong></p><p>**第二种方式：**使用自己的异常处理类 让异常信息返回json类型：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@ExceptionHandler(Exception.class)</span></span>
<span class="line"><span style="color:#A6ACCD;">    public Object error( Exception e){</span></span>
<span class="line"><span style="color:#A6ACCD;">        int code=666;</span></span>
<span class="line"><span style="color:#A6ACCD;">        if(e instanceof BizException){</span></span>
<span class="line"><span style="color:#A6ACCD;">            BizException biz= (BizException) e;</span></span>
<span class="line"><span style="color:#A6ACCD;">            code=biz.getCode();</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        // 使用自己的异常处理</span></span>
<span class="line"><span style="color:#A6ACCD;">        if(e instanceof MethodArgumentNotValidException){</span></span>
<span class="line"><span style="color:#A6ACCD;">            StringBuilder sb = new StringBuilder();           </span></span>
<span class="line"><span style="color:#A6ACCD;">  List&lt;ObjectError&gt; allErrors = ( (MethodArgumentNotValidException) e).getBindingResult().getAllErrors();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            for(ObjectError error : allErrors){</span></span>
<span class="line"><span style="color:#A6ACCD;">                sb.append(error.getDefaultMessage());</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">            return   ResponseDTO.error(888,sb.toString());</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        return   ResponseDTO.error(code,e.getMessage());</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><p>测试访问：</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112va038b630a59ce2826ab142709aad0c21?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4OTc0NTcyNCwiaWF0IjoxNjg5MTQwOTI0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnZhMDM4YjYzMGE1OWNlMjgyNmFiMTQyNzA5YWFkMGMyMSJ9.zoW575-jskN5HflCnlMY10JAHNccY5NwrxaiRpcz074&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>正则表达式在线工具：<a href="https://c.runoob.com/front-end/854/" target="_blank" rel="noreferrer"><strong>https://c.runoob.com/front-end/854/</strong></a></p><h3 id="max-min的用法" tabindex="-1">max，min的用法 <a class="header-anchor" href="#max-min的用法" aria-label="Permalink to &quot;max，min的用法&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Min</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">数量最小为5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Max</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">数量最大为100</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> qty</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>测试：</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112vf733b2d014e1030aaad3f7903aadffbc?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IjY0NDljNGQwODhhZWYwZGI0YjhjMWNkMyIsImV4cCI6MTY4OTc1MjU2MCwiaWF0IjoxNjg5MTQ3NzYwLCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnZmNzMzYjJkMDE0ZTEwMzBhYWFkM2Y3OTAzYWFkZmZiYyJ9.ekQM-vNxr-fq1klXqEV8qW-z87HrzyvCCbgBAGQ1Lio&amp;download=image.png" alt=""></p><p>邮箱验证： 必须结合非空约束</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Email</span></span>
<span class="line"><span style="color:#A6ACCD;">    @NotEmpty</span></span>
<span class="line"><span style="color:#A6ACCD;">    private String email;</span></span></code></pre></div><p>测试</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112vfb020937f283684de77081cece0c920e?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IjY0NDljNGQwODhhZWYwZGI0YjhjMWNkMyIsImV4cCI6MTY4OTc1MjYwMywiaWF0IjoxNjg5MTQ3ODAzLCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnZmYjAyMDkzN2YyODM2ODRkZTc3MDgxY2VjZTBjOTIwZSJ9.oxoZRdqr0gm_nLLcsW5m8nzJAloZr2sKsaywheA5cRo&amp;download=image.png" alt=""></p><p>身份证：正则表达式验证</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Pattern(regexp = &quot;(^\\\\d{15}$)|(^\\\\d{18}$)|(^\\\\d{17}(\\\\d|X|x)$)&quot;, message = &quot;身份号不合法请输入18位数字&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    private String idCard;</span></span></code></pre></div><p><img src="https://tcs-devops.aliyuncs.com/storage/112v4fa4c62fa43a198e253902581e075ee1?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IjY0NDljNGQwODhhZWYwZGI0YjhjMWNkMyIsImV4cCI6MTY4OTc1MjkwMSwiaWF0IjoxNjg5MTQ4MTAxLCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnY0ZmE0YzYyZmE0M2ExOThlMjUzOTAyNTgxZTA3NWVlMSJ9.aB3IyZKcDo3QeS0o0uVIu_RwtL42WzzyhrirZ7UIfp8&amp;download=image.png" alt=""></p>`,41),e=[t];function o(r,c,i,C,d,y){return a(),n("div",null,e)}const g=s(p,[["render",o]]);export{D as __pageData,g as default};
