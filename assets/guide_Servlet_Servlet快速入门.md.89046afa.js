import{_ as s,o as a,c as n,O as e}from"./chunks/framework.571309da.js";const d=JSON.parse('{"title":"1 Servlet","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Servlet/Servlet快速入门.md","filePath":"guide/Servlet/Servlet快速入门.md"}'),t={name:"guide/Servlet/Servlet快速入门.md"},l=e(`<h1 id="_1-servlet" tabindex="-1">1 Servlet <a class="header-anchor" href="#_1-servlet" aria-label="Permalink to &quot;1 Servlet&quot;">​</a></h1><h2 id="_1-1-servlet概述" tabindex="-1">1.1 Servlet概述 <a class="header-anchor" href="#_1-1-servlet概述" aria-label="Permalink to &quot;1.1 Servlet概述&quot;">​</a></h2><p>Servlet是SUN公司提供的一套规范，名称就叫Servlet规范，它也是JavaEE规范之一。我们可以像学习Java基础一样，通过API来学习Servlet。这里需要注意的是，在我们之前JDK的API中是没有Servlet规范的相关内容，需要使用JavaEE的API。目前在Oracle官网中的最新版本是<a href="https://www.oracle.com/technetwork/java/javaee/documentation/ee8-release-notes-3894362.html" target="_blank" rel="noreferrer">JavaEE8</a>，该网址中介绍了JavaEE8的一些新特性。当然，我们可以通过访问官方API，学习和查阅里面的内容。</p><h2 id="_1-2-servlet详解" tabindex="-1">1.2 Servlet详解 <a class="header-anchor" href="#_1-2-servlet详解" aria-label="Permalink to &quot;1.2 Servlet详解&quot;">​</a></h2><ul><li><p>Servlet是一个运行在web服务端的java小程序，用于接收和响应客户端的请求，基于Http协议</p></li><li><p>要想实现Servlet功能，可以实现Servlet接口，继承GenericServlet或者HttpServlet</p></li><li><p>核心方法：任何客户端请求每次请求时都会执行service方法</p></li></ul><h2 id="_1-3-servlet版本对应" tabindex="-1">1.3 servlet版本对应 <a class="header-anchor" href="#_1-3-servlet版本对应" aria-label="Permalink to &quot;1.3 servlet版本对应&quot;">​</a></h2><p>截止到目前，最新的 Servlet 版本是 6.1。下表列出了各种主要 Servlet 版本其对应的 Java 版本和Tomcat版本。</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112v65646e34b0b258459f553ba1ef012bc5?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnY2NTY0NmUzNGIwYjI1ODQ1OWY1NTNiYTFlZjAxMmJjNSJ9.vTBE3C7UShcAU5LU3HohfWJSQEAmrzvUkJF5XV_JLI0&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><h2 id="_1-4-servlet-主要做的工作" tabindex="-1">1.4 Servlet 主要做的工作 <a class="header-anchor" href="#_1-4-servlet-主要做的工作" aria-label="Permalink to &quot;1.4 Servlet 主要做的工作&quot;">​</a></h2><ul><li><p>允许程序猿注册一个类, 在 Tomcat 收到某个特定的 HTTP 请求的时候, 执行这个类中的一些代码。</p></li><li><p>帮助程序猿解析 HTTP 请求，把 HTTP 请求从一个字符串解析成一个 HttpRequest 对象。</p></li><li><p>帮助程序猿构造 HTTP 响应，程序猿只要给指定的 HttpResponse 对象填写一些属性字段, Servlet 就会自动的按照 HTTP 协议的方式构造出一个 HTTP 响应字符串, 并通过 Socket 写回给客户端。简而言之, Servlet 是一组 Tomcat 提供的 API, 让程序猿自己写的代码能很好的和 Tomcat 配合起来, 从 而更简单的实现一个 web app。而不必关注 Socket, HTTP协议格式, 多线程并发等技术细节, 降低了 web app 的开发门槛, 提高了开发效率。 我们只需要关注生成响应的这个过程。</p></li></ul><h1 id="_2-servlet快速入门" tabindex="-1">2 Servlet快速入门 <a class="header-anchor" href="#_2-servlet快速入门" aria-label="Permalink to &quot;2 Servlet快速入门&quot;">​</a></h1><h2 id="_2-1-servlet编写步骤" tabindex="-1">2.1 servlet编写步骤 <a class="header-anchor" href="#_2-1-servlet编写步骤" aria-label="Permalink to &quot;2.1 servlet编写步骤&quot;">​</a></h2><ol><li><p><strong>前期准备-创建JavaWeb工程</strong></p></li><li><p><strong>编写一个普通类继承GenericServlet并重写service方法</strong></p></li><li><p>**在web.xml配置Servlet **</p></li><li><p><strong>部署并启动</strong></p></li><li><p><strong>浏览器测试运行</strong></p></li></ol><h3 id="_2-1-1-创建javaweb工程" tabindex="-1">2.1.1 创建Javaweb工程 <a class="header-anchor" href="#_2-1-1-创建javaweb工程" aria-label="Permalink to &quot;2.1.1 创建Javaweb工程&quot;">​</a></h3><p>第一步：</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112vb336f9dab378358b1dfe18b92ea1f704?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnZiMzM2ZjlkYWIzNzgzNThiMWRmZTE4YjkyZWExZjcwNCJ9.jqhwhzTRtJBvLI6S8zFZ2EToO2v_k5DBmD6fUJQ-R5E&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p><img src="https://tcs-devops.aliyuncs.com/storage/112vb9d67fd66546fca968a9c41356224016?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnZiOWQ2N2ZkNjY1NDZmY2E5NjhhOWM0MTM1NjIyNDAxNiJ9.yEHcwSYLNCdzTNY7SI5sgLL5syNUGM2pPri522O_slM&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><h3 id="_2-1-2-创建servlet类" tabindex="-1">2.1.2 创建servlet类 <a class="header-anchor" href="#_2-1-2-创建servlet类" aria-label="Permalink to &quot;2.1.2 创建servlet类&quot;">​</a></h3><p>第一步，pom文件添加jar包</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">javax.servlet</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">javax.servlet-api</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">4.0.0</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">provided</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">最新版本使用下方的</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependencies</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">jakarta.servlet</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">jakarta.servlet-api</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">6.0.0</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependencies</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>第二步，创建servlet类继承GenericServlet</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FristServlet</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GenericServlet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">service</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ServletRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">servletRequest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ServletResponse</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">servletResponse</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                                                </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ServletException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">firstServlet执行了service方法</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_2-1-3-编写web-xml配置文件" tabindex="-1">2.1.3 编写web.xml配置文件 <a class="header-anchor" href="#_2-1-3-编写web-xml配置文件" aria-label="Permalink to &quot;2.1.3 编写web.xml配置文件&quot;">​</a></h3><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#F07178;">xml</span><span style="color:#C792EA;"> version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">web-app</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://xmlns.jcp.org/xml/ns/javaee</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">         </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">xsi</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.w3.org/2001/XMLSchema-instance</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">         </span><span style="color:#C792EA;">xsi</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">schemaLocation</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">         </span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!--servlet配置中心--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!--servlet类标签--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">servlet</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">&lt;!--给定一个声明名字--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">servlet-name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">fristServlet</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">servlet-name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">&lt;!--servlet全类名--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">servlet-class</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">com.by.web.FristServlet</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">servlet-class</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">servlet</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">&lt;!--映射一个servlet访问的URl路径--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">servlet-mapping</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">&lt;!--指定要映射的servlet名称--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">servlet-name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">fristServlet</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">servlet-name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">&lt;!--指定访问servlet的url路径--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">url-pattern</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">/fsl</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">url-pattern</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">servlet-mapping</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">web-app</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="_2-1-4-部署tomcat并启动" tabindex="-1">2.1.4 部署tomcat并启动 <a class="header-anchor" href="#_2-1-4-部署tomcat并启动" aria-label="Permalink to &quot;2.1.4 部署tomcat并启动&quot;">​</a></h3><p>点击run选择Edit 或者直接点击右上角小锤子也可以</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112v7222cc813c992ec658832998c8ef021f?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnY3MjIyY2M4MTNjOTkyZWM2NTg4MzI5OThjOGVmMDIxZiJ9.C6mdVW3YF2ePeS3Ogg8eYCywoVw43RjHIW0iNW2U5WU&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>配置添加tomcat文件</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112vb8e4ed7e4a7b5dfb78a4bee800003747?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnZiOGU0ZWQ3ZTRhN2I1ZGZiNzhhNGJlZTgwMDAwMzc0NyJ9.fCmTHGdYB3jrOJbUtYq38wltGse2BdVps3PHWdyw_-o&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>配置项目添加到tomcat中：</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112v64e3c00158c598f98c559d5b05757bba?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnY2NGUzYzAwMTU4YzU5OGY5OGM1NTlkNWIwNTc1N2JiYSJ9.7HKBthK0ZIqqO0ZvuFPMHjXH5ZMw0qMzk7honAswXfM&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><h3 id="_2-1-5-浏览器url地址输入" tabindex="-1">2.1.5 浏览器url地址输入 <a class="header-anchor" href="#_2-1-5-浏览器url地址输入" aria-label="Permalink to &quot;2.1.5 浏览器url地址输入&quot;">​</a></h3><p><img src="https://tcs-devops.aliyuncs.com/storage/112v0839d492d74b32bbe8eb4f78d9f6aa5e?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnYwODM5ZDQ5MmQ3NGIzMmJiZThlYjRmNzhkOWY2YWE1ZSJ9.Pj7TuYJ6EEo-djkChMxcAHrdVsuAoIRQmdHRW04fK_E&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><h2 id="_2-2-servlet执行过程分析" tabindex="-1">2.2 Servlet执行过程分析 <a class="header-anchor" href="#_2-2-servlet执行过程分析" aria-label="Permalink to &quot;2.2 Servlet执行过程分析&quot;">​</a></h2><blockquote><p>我们通过浏览器发送请求，请求首先到达Tomcat服务器，由服务器解析请求URL，然后在部署的应用列表中找到我们的应用。接下来，在我们的应用中找应用里的web.xml配置文件，在web.xml中找到FirstServlet的配置，找到后执行service方法，最后由FirstServlet响应客户浏览器。整个过程如下图所示：</p></blockquote><p><img src="https://tcs-devops.aliyuncs.com/storage/112v7210408493f00792dacee5d75a79ca28?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnY3MjEwNDA4NDkzZjAwNzkyZGFjZWU1ZDc1YTc5Y2EyOCJ9.axzzz04bHkwQfwypjHbqsB0jchiVk47bW3rVtx_IsEY&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>一句话总结执行过程：</p><p>浏览器——&gt;Tomcat服务器——&gt;我们的应用——&gt;应用中的web.xml——&gt;FirstServlet——&gt;响应浏览器</p><h2 id="_2-3-继承httpservlet使用案例" tabindex="-1">2.3 继承Httpservlet使用案例 <a class="header-anchor" href="#_2-3-继承httpservlet使用案例" aria-label="Permalink to &quot;2.3 继承Httpservlet使用案例&quot;">​</a></h2><blockquote><p>继承HttpServlet，它是jakarta.servlet.http包下的一个抽象类，是GenericServlet的子类。<strong>如果我们选择继承HttpServlet时，只需要重写doGet和doPost方法，不要覆盖service方法。</strong></p><p>使用此种方式，表示我们的请求和响应需要和HTTP协议相关。也就是说，我们是通过HTTP协议来访问的。那么每次请求和响应都符合HTTP协议的规范。请求的方式就是HTTP协议所支持的方式（目前我们只知道GET和POST，而实际HTTP协议支持7种请求方式，GET POST PUT DELETE TRACE OPTIONS HEAD )。</p></blockquote><h3 id="_2-3-1-在入门案例的工程中创建一个servlet继承httpservlet" tabindex="-1">2.3.1 在入门案例的工程中创建一个Servlet继承HttpServlet <a class="header-anchor" href="#_2-3-1-在入门案例的工程中创建一个servlet继承httpservlet" aria-label="Permalink to &quot;2.3.1 在入门案例的工程中创建一个Servlet继承HttpServlet&quot;">​</a></h3><p><img src="https://tcs-devops.aliyuncs.com/storage/112v25a17712eef2840f3a3759ac287c75b3?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnYyNWExNzcxMmVlZjI4NDBmM2EzNzU5YWMyODdjNzViMyJ9.j3VlLv0_dmxfUmndunLh5pnWXdv8YToDbBeT_gt-NlY&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>web.xml配置文件：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;servlet&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;servlet-name&gt;servletDemo01&lt;/servlet-name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;servlet-class&gt;com.by.web.ServletDemo01&lt;/servlet-class&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/servlet&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;servlet-mapping&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;servlet-name&gt;servletDemo01&lt;/servlet-name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;url-pattern&gt;/servletDemo01&lt;/url-pattern&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/servlet-mapping&gt;</span></span></code></pre></div><p><strong>第二步：部署项目并测试访问</strong></p><p>当我们在地址栏输入servletDemo01的访问URL时，出现了访问错误，状态码是405。提示信息是：方法不允许。</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112v87e80097b8844990240a162659321b32?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnY4N2U4MDA5N2I4ODQ0OTkwMjQwYTE2MjY1OTMyMWIzMiJ9.Ha8iI4lFgJYt7T0lMhJSUOD8tiD4yhF6WVShayEFQ3s&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p><strong>第三步：分析原因</strong></p><p>得出HttpServlet的使用结论：</p><blockquote><p><strong>我们继承了HttpServlet，需要重写里面的doGet和doPost方法来接收get方式和post方式的请求。</strong></p></blockquote><p>为了实现代码的可重用性，我们只需要在doGet或者doPost方法中一个里面提供具体功能即可，而另外的那个方法只需要调用提供了功能的方法。</p><h3 id="_2-3-2-响应行详解" tabindex="-1">2.3.2 响应行详解 <a class="header-anchor" href="#_2-3-2-响应行详解" aria-label="Permalink to &quot;2.3.2 响应行详解&quot;">​</a></h3><p>响应行：<code>HTTP/1.1 200 OK</code></p><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>HTTP/1.1</td><td>使用协议的版本。</td></tr><tr><td>200</td><td>响应状态码</td></tr><tr><td>OK</td><td>状态码描述</td></tr></tbody></table><p>常用状态码介绍：</p><table><thead><tr><th>状态码</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>一切都OK&gt;</td></tr><tr><td>302/307</td><td>请求重定向(客户端行为，两次请求，地址栏发生改变)</td></tr><tr><td>304</td><td>请求资源未发生变化，使用缓存</td></tr><tr><td>404</td><td>请求资源未找到</td></tr><tr><td>405</td><td>用来访问本页面的 HTTP 谓词不被允许（方法不被允许）请求方式不对</td></tr><tr><td>500</td><td>服务器错误</td></tr></tbody></table><h2 id="_2-4-servlet使用细节" tabindex="-1">2.4 Servlet使用细节 <a class="header-anchor" href="#_2-4-servlet使用细节" aria-label="Permalink to &quot;2.4 Servlet使用细节&quot;">​</a></h2><h3 id="_2-4-1-servlet生命周期" tabindex="-1">2.4.1 Servlet生命周期 <a class="header-anchor" href="#_2-4-1-servlet生命周期" aria-label="Permalink to &quot;2.4.1 Servlet生命周期&quot;">​</a></h3><p>生命周期是指事物从创建到毁灭的过程。</p><p>Servlet 也有生命周期，Servlet 的生命周期就是 Servlet 从创建到销毁的过程。Servlet 的生命周期由 Servlet 容器管理，主要分为以下 3 个阶段。</p><ol><li><p>初始化阶段</p></li><li><p>运行时阶段</p></li><li><p>销毁阶段</p></li></ol><h3 id="_2-4-2-初始化阶段" tabindex="-1">2.4.2 初始化阶段 <a class="header-anchor" href="#_2-4-2-初始化阶段" aria-label="Permalink to &quot;2.4.2 初始化阶段&quot;">​</a></h3><p>Servlet 初始化是其生命周期的第一个阶段，也是其他阶段的基础。只有完成了初始化，Servlet 才能处理来自客户端的请求。</p><p>Servlet 初始化阶段分为 2 步：</p><ol><li><p>加载和实例化 Servlet；</p></li><li><p>调用 init() 方法进行初始化。</p></li><li><p>加载和实例化 Servlet</p></li></ol><p>Servlet 容器负责加载和实例化 Servlet。当容器启动或首次请求某个 Servlet 时，容器会读取 web.xml 或 @WebServlet 中的配置信息，对指定的 Servlet 进行加载。加载成功后，容器会通过反射对 Servlet 进行实例化。</p><blockquote><p>因为 Servlet 容器是通过 Java 的反射 API 来创建 Servlet 实例的，需要调用 Servlet 的默认构造方法（default constructor，即不带参数的构造方法），所以在编写 Servlet 类时，不能只提供一个带参数的构造方法。</p></blockquote><ol start="2"><li>调用 init() 方法进行初始化</li></ol><p>加载和实例化完成后，Servlet 容器调用 init() 方法初始化 Servlet 实例。</p><p>初始化的目的：让 Servlet 实例在处理请求之前完成一些初始化工作，例如建立数据库连接，获取配置信息等。</p><p>在 Servlet 的整个生命周期内，init() 方法只能被调用一次。</p><p>初始化期间，Servlet 实例可以通过 ServletConfig 对象获取在 web.xml 或者 @WebServlet 中配置的初始化参数。</p><h3 id="_2-4-3-运行时阶段" tabindex="-1">2.4.3 运行时阶段 <a class="header-anchor" href="#_2-4-3-运行时阶段" aria-label="Permalink to &quot;2.4.3 运行时阶段&quot;">​</a></h3><p>运行时阶段是 Servlet 生命周期中最重要的阶段。Servlet 容器接收到来自客户端请求时，容器会针对该请求分别创建一个 ServletRequst 对象和 ServletResponse 对象，将它们以参数的形式传入 service() 方法内，并调用该方法对请求进行理处。</p><h3 id="_2-4-4-销毁阶段" tabindex="-1">2.4.4 销毁阶段 <a class="header-anchor" href="#_2-4-4-销毁阶段" aria-label="Permalink to &quot;2.4.4 销毁阶段&quot;">​</a></h3><p>当 Servlet 容器关闭、重启或移除 Servlet 实例时，容器就会调用 destory() 方法，释放该实例使用的资源，例如：关闭数据库连接，关闭文件的输入流和输出流等，随后该实例被 Java 的垃圾收集器所回收。</p><p>对于每个 Servlet 实例来说，destory() 方法只能被调用一次。</p><h2 id="_2-5-servlet-生命周期执行流程" tabindex="-1">2.5 Servlet 生命周期执行流程 <a class="header-anchor" href="#_2-5-servlet-生命周期执行流程" aria-label="Permalink to &quot;2.5 Servlet 生命周期执行流程&quot;">​</a></h2><p>Servlet 生命周期流程如下图所示。</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112v5aeb0e32de59cc8106b5ce5671a3984e?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzY5OCwiaWF0IjoxNjg4MDM4ODk4LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnY1YWViMGUzMmRlNTljYzgxMDZiNWNlNTY3MWEzOTg0ZSJ9.8MDXdjqKzY1O57afyBWQp_TcgVkVvUGRpeObjTLfYBQ&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>在 Servlet 的整个生命周期中，创建 Servlet 实例、init() 方法和 destory() 方法都只执行一次。当初始化完成后，Servlet 容器会将该实例保存在内存中，通过调用它的 service() 方法，为接收到的请求服务。</p><p>总结：</p><blockquote><p>servlet对象只会创建一次，销毁一次，所以Servlet对象只有一个实例，如果一个对象实例在应用中是唯一的存在，那么就被称为单例。</p></blockquote><h3 id="_2-5-1代码演示" tabindex="-1">2.5.1代码演示： <a class="header-anchor" href="#_2-5-1代码演示" aria-label="Permalink to &quot;2.5.1代码演示：&quot;">​</a></h3><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">public void init() throws ServletException {</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;servlet创建并初始化成功&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;接收客户端的请求。。。&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">    doGet(req,resp);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">public void destroy() {</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;对象已销毁。。。。&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="_2-6-虚拟路径匹配规则" tabindex="-1">2.6 虚拟路径匹配规则 <a class="header-anchor" href="#_2-6-虚拟路径匹配规则" aria-label="Permalink to &quot;2.6 虚拟路径匹配规则&quot;">​</a></h2><p>Servlet 虚拟路径匹配规则有以下 4 种：</p><ol><li><p>完全路径匹配 /demo</p></li><li><p>目录匹配 /demo/*</p></li><li><p>扩展名匹配 *.do</p></li><li><p>缺省匹配（默认匹配） / /*</p></li></ol><p>下面我们以 servletDemo 为例，分别介绍 4 种规则。</p><table><thead><tr><th>匹配规则</th><th>使用规则</th><th>虚拟路径</th><th>可访问的URL</th></tr></thead><tbody><tr><td>完全路径匹配 (精确匹配)</td><td>以/开始，不能包含通配符*。 必须完全匹配</td><td>/myServlet /user/myServlet /product/index.action</td><td><code>http://localhost:8080/servletDemo/myServlet http://localhost:8080/servletDemo/user/myServlet http://localhost:8080/servletDemo/product/index.action</code></td></tr><tr><td>目录匹配</td><td>以/字符开头，并以/*结尾的字符串。 用于路径匹配</td><td>/user/*</td><td><code>http://localhost:8080/servletDemo/user/aaa http://localhost:8080/servletDemo/aa</code></td></tr><tr><td>扩展名匹配</td><td>以通配符*.开头的字符串。 用于扩展名匹配</td><td>*.do *.action *.jsp</td><td><code>http://localhost:8080/servletDemo/user.do http://localhost:8080/servletDemo/myServlet.action http://localhost:8080/servletDemo/bb.jsp</code></td></tr><tr><td>缺省匹配（默认匹配）</td><td>映射路径为/，表示这个 Servlet 为当前应用的缺省 Servlet 或默认 Servlet，默认处理无法匹配到虚拟路径的请求。</td><td>/</td><td>可以匹配任意请求 URL</td></tr></tbody></table><p>注意：目录匹配和扩展名匹配无法混合使用，即<code>/rest/*.do</code>这种写法是不正确的。</p><h3 id="_2-6-1-匹配优先级" tabindex="-1">2.6.1 匹配优先级 <a class="header-anchor" href="#_2-6-1-匹配优先级" aria-label="Permalink to &quot;2.6.1 匹配优先级&quot;">​</a></h3><p>Servlet 虚拟路径的匹配优先级顺序为：全路径匹配（精确匹配）&gt; 目录匹配 &gt; 扩展名匹配 &gt; 缺省匹配（默认匹配）。</p><h3 id="_2-6-2-多路径映射" tabindex="-1">2.6.2 多路径映射 <a class="header-anchor" href="#_2-6-2-多路径映射" aria-label="Permalink to &quot;2.6.2 多路径映射&quot;">​</a></h3><ul><li><p>我们可以给一个Servlet配置多个访问映射，从而根据不同的请求路径来实现不同的功能。</p></li><li><p>场景分析：</p><ul><li><p>如果访问访问的资源路径是/vip 商品价格打9折</p></li><li><p>如果访问访问的资源路径是/Cvip 商品价格打5折</p></li><li><p>如果访问访问的资源路径是其他 商品价格不打折</p></li></ul></li></ul><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">    //1、定义商品价格</span></span>
<span class="line"><span style="color:#A6ACCD;">    int money=1000;</span></span>
<span class="line"><span style="color:#A6ACCD;">    //2、获取浏览器访问路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    String path = req.getRequestURI();</span></span>
<span class="line"><span style="color:#A6ACCD;">     path = path.substring(path.lastIndexOf(&quot;/&quot;));</span></span>
<span class="line"><span style="color:#A6ACCD;">    //判断路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    if(&quot;/vip&quot;.equals(path)){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(&quot;商品原价是=&quot;+money+&quot;优惠后的价格是=&quot;+(money * 0.9));</span></span>
<span class="line"><span style="color:#A6ACCD;">    }else if (&quot;/cvip&quot;.equals(path)){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(&quot;商品原价是=&quot;+money+&quot;优惠后的价格是=&quot;+(money * 0.5));</span></span>
<span class="line"><span style="color:#A6ACCD;">    }else{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(&quot;您不是会员您的商品原价是=&quot;+money);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>web.xml配置</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;servlet&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;servlet-name&gt;ServletDemo02&lt;/servlet-name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;servlet-class&gt;com.by.web.ServletDemo02&lt;/servlet-class&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/servlet&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;servlet-mapping&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;servlet-name&gt;ServletDemo02&lt;/servlet-name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;url-pattern&gt;/demo02/*&lt;/url-pattern&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/servlet-mapping&gt;</span></span></code></pre></div><h2 id="_3-tomcat介绍" tabindex="-1">3 TomCat介绍 <a class="header-anchor" href="#_3-tomcat介绍" aria-label="Permalink to &quot;3 TomCat介绍&quot;">​</a></h2><h3 id="_3-1-称服务器" tabindex="-1">3.1 称服务器 <a class="header-anchor" href="#_3-1-称服务器" aria-label="Permalink to &quot;3.1 称服务器&quot;">​</a></h3><blockquote><p>服务器的概念非常的广泛，它可以指代一台特殊的计算机（相比普通计算机运行更快、负载更高、价格更贵），也可以指代用于部署网站的应用。我们这里说的服务器，其实是web服务器，或者应用服务器。它本质就是一个软件，一个应用。作用就是发布我们的应用（工程），让用户可以通过浏览器访问我们的应用。</p></blockquote><p>常见的应用服务器，请看下表：</p><table><thead><tr><th>服务器名称</th><th>说明</th></tr></thead><tbody><tr><td>weblogic</td><td>实现了javaEE规范，重量级服务器，又称为javaEE容器</td></tr><tr><td>websphereAS</td><td>实现了javaEE规范，重量级服务器。</td></tr><tr><td>JBOSSAS</td><td>实现了JavaEE规范，重量级服务器。免费的。</td></tr><tr><td>Tomcat</td><td>实现了jsp/servlet规范，是一个轻量级服务器，开源免费。</td></tr></tbody></table><h3 id="_3-2-tomcat下载" tabindex="-1">3.2 Tomcat下载 <a class="header-anchor" href="#_3-2-tomcat下载" aria-label="Permalink to &quot;3.2 Tomcat下载&quot;">​</a></h3><h2 id="_4-servletconfig" tabindex="-1">4 ServletConfig <a class="header-anchor" href="#_4-servletconfig" aria-label="Permalink to &quot;4 ServletConfig&quot;">​</a></h2><h2 id="_4-1-servletconfig概述" tabindex="-1">4.1 ServletConfig概述 <a class="header-anchor" href="#_4-1-servletconfig概述" aria-label="Permalink to &quot;4.1 ServletConfig概述&quot;">​</a></h2><h3 id="_4-1-1-基本概念" tabindex="-1">4.1.1 基本概念 <a class="header-anchor" href="#_4-1-1-基本概念" aria-label="Permalink to &quot;4.1.1 基本概念&quot;">​</a></h3><blockquote><p>它是Servlet的配置参数对象，在Servlet规范中，允许为每个Servlet都提供一些初始化配置。所以，每个Servlet都有一个自己的ServletConfig。它的作用是在Servlet初始化期间，把一些配置信息传递给Servlet。</p></blockquote><h3 id="_4-1-2-生命周期" tabindex="-1">4.1.2 生命周期 <a class="header-anchor" href="#_4-1-2-生命周期" aria-label="Permalink to &quot;4.1.2 生命周期&quot;">​</a></h3><blockquote><p>由于它是在初始化阶段读取了web.xml中为Servlet准备的初始化配置，并把配置信息传递给Servlet，所以生命周期与Servlet相同。这里需要注意的是，如果Servlet配置了<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>，那么ServletConfig也会在应用加载时创建。</p></blockquote><h2 id="_4-2-servletconfig的使用" tabindex="-1">4.2 ServletConfig的使用 <a class="header-anchor" href="#_4-2-servletconfig的使用" aria-label="Permalink to &quot;4.2 ServletConfig的使用&quot;">​</a></h2><h3 id="_4-2-1-如何配置" tabindex="-1">4.2.1 如何配置 <a class="header-anchor" href="#_4-2-1-如何配置" aria-label="Permalink to &quot;4.2.1 如何配置&quot;">​</a></h3><blockquote><p>如何配置初始化参数，它需要使用<code>&lt;servlet&gt;</code>标签中的<code>&lt;init-param&gt;</code>标签来配置。Servlet的初始化参数都是配置在Servlet的声明部分的。并且每个Servlet都支持有多个初始化参数，并且初始化参数都是以键值对的形式存在的。接下来，我们看配置示例：</p></blockquote><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">配置servletDemo02</span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">servletDemo02</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">com</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">by</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">web</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ServletDemo02</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">配置初始化参数</span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">            用于获取初始化参数的key</span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">初始化参数的值</span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">张三</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">servletInfo</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;this</span><span style="color:#A6ACCD;"> is </span><span style="color:#C792EA;">Demo02</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">mapping</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">servletDemo02</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">pattern</span><span style="color:#89DDFF;">&gt;/</span><span style="color:#A6ACCD;">servletDemo02</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">pattern</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">mapping</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="_4-2-3-servletconfig-接口参数" tabindex="-1">4.2.3 ServletConfig 接口参数 <a class="header-anchor" href="#_4-2-3-servletconfig-接口参数" aria-label="Permalink to &quot;4.2.3 ServletConfig 接口参数&quot;">​</a></h2><p>javax.servlet 包提供了一个 ServletConfig 接口，该接口中提供了以下方法。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>String</td><td>getInitParameter(String name)</td><td>根据初始化参数名 name，返回对应的初始化参数值。</td></tr><tr><td><code>Enumeration&lt;String&gt;</code></td><td>getInitParameterNames()</td><td>返回 Servlet 所有的初始化参数名的枚举集合，如果该 Servlet 没有初始化参数，则返回一个空的集合。</td></tr><tr><td>ServletContext</td><td>getServletContext()</td><td>返回一个代表当前 Web 应用的 ServletContext 对象。</td></tr><tr><td>String</td><td>getServletName()</td><td>返回 Servlet 的名字，即 web.xml 中 <code>&lt;servlet-name&gt; </code> 元素的值。</td></tr></tbody></table><p>代码演示输出</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//创建一个servletConfig对象</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ServletConfig</span><span style="color:#A6ACCD;"> servletConfig</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ServletConfig</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws ServletException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">servletConfig</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doGet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">HttpServletRequest</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletResponse</span><span style="color:#A6ACCD;"> resp</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws ServletException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IOException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//输出servletConfig的值</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">servletConfig</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//获取servlet名字</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> servletName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> servletConfig</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getServletName</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">servlet的名字是=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">servletName</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//获取自定以name名字</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> servletConfig</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInitParameter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">自定义的名字是=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Enumeration</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> enumer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> servletConfig</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInitParameterNames</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">enumer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasMoreElements</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//取出每个names值</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> names </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> enumer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextElement</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//根据key获取Value值</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> servletConfig</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInitParameter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">names</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name= </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">names</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">  value= </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//获取servletContext对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ServletContext</span><span style="color:#A6ACCD;"> servletContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> servletConfig</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getServletContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">servletContext</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="_5-servletcontext接口详解" tabindex="-1">5 ServletContext接口详解 <a class="header-anchor" href="#_5-servletcontext接口详解" aria-label="Permalink to &quot;5 ServletContext接口详解&quot;">​</a></h2><p>Servlet 容器启动时，会为每个 Web 应用（web下的每个目录都是一个 Web 应用）创建一个唯一的 ServletContext 对象，该对象一般被称为“Servlet 上下文”。</p><p>ServletContext 对象的生命周期从 Servlet 容器启动时开始，到容器关闭或应用被卸载时结束。</p><p>Web 应用中的所有 Servlet 共享同一个 ServletContext 对象，不同 Servlet 之间可以通过 ServletContext 对象实现数据通讯，因此 ServletContext 对象也被称为 Context 域对象。</p><blockquote><p>域对象是服务器在内存上创建的存储空间，该空间用于不同动态资源（例如 Servlet、JSP）之间传递与共享数据。</p></blockquote><h3 id="_5-1-域对象概念" tabindex="-1">5.1 域对象概念 <a class="header-anchor" href="#_5-1-域对象概念" aria-label="Permalink to &quot;5.1 域对象概念&quot;">​</a></h3><p>域对象的概念，它指的是对象有作用域，即有作用范围。</p><p>域对象的作用，域对象可以实现数据共享。不同作用范围的域对象，共享数据的能力不一样。</p><p>在Servlet规范中，一共有4个域对象。今天我们讲解的ServletContext就是其中一个。它也是我们接触的第一个域对象。它是web应用中最大的作用域，叫application域。每个应用只有一个application域。它可以实现整个应用间的数据共享功能。</p><h3 id="_5-2-servletcontext配置" tabindex="-1">5.2 ServletContext配置 <a class="header-anchor" href="#_5-2-servletcontext配置" aria-label="Permalink to &quot;5.2 ServletContext配置&quot;">​</a></h3><p>ServletContext既然被称之为应用上下文对象，所以它的配置是针对整个应用的配置，而非某个特定Servlet的配置。它的配置被称为应用的初始化参数配置。</p><p>配置的方式，需要在<code>&lt;web-app&gt;</code>标签中使用<code>&lt;context-param&gt;</code>来配置初始化参数。具体代码如下：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;!--配置应用初始化参数--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;context-param&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;!--用于获取初始化参数的key值--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;param-name&gt;namespace&lt;/param-name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;!--用于获取初始化参数的value值--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;param-value&gt;小李子&lt;/param-value&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/context-param&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;!--每个应用初始化参数都需要用到context-param标签--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;context-param&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;param-name&gt;globalEncoding&lt;/param-name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;param-value&gt;UTF-8&lt;/param-value&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/context-param&gt;</span></span></code></pre></div><h3 id="_5-3-servletcontext常用的方法" tabindex="-1">5.3 ServletContext常用的方法 <a class="header-anchor" href="#_5-3-servletcontext常用的方法" aria-label="Permalink to &quot;5.3 ServletContext常用的方法&quot;">​</a></h3><table><thead><tr><th>返回值类型</th><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>String</td><td>getInitParameter(String name)</td><td>根据初始化参数名 name，返回对应的初始化参数值。</td></tr><tr><td>string</td><td>getContextPath()</td><td>获取虚拟目录</td></tr><tr><td>string</td><td>getRealPath(String name)</td><td>根据虚拟目录获取应用部署的磁盘绝对路径</td></tr></tbody></table><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doGet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">HttpServletRequest</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletResponse</span><span style="color:#A6ACCD;"> resp</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws ServletException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IOException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//创建上下文对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ServletContext</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">getServletContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//获取全局配置的globalEncoding</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> glo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInitParameter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">globalEncoding</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">glo</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//获取虚拟目录</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> pa </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getContextPath</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">虚拟目录是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">pa</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//根据虚拟目录获取应用部署的磁盘绝对路径</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//获取c.txt文件的绝对路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRealPath</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/WEB-INF/c.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//向域对象中存储数据</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// context.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeAttribute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">username</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_5-4-servletcontext常用方法" tabindex="-1">5.4 ServletContext常用方法 <a class="header-anchor" href="#_5-4-servletcontext常用方法" aria-label="Permalink to &quot;5.4 ServletContext常用方法&quot;">​</a></h3><blockquote><p>实现共享数据的方法</p></blockquote><table><thead><tr><th>返回值</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td>setAttribute(String name, Object value);</td><td>向应用域对象中存储数据</td></tr><tr><td>object</td><td>getAttribute(String name);</td><td>通过名称获取应用对象中存储的数据</td></tr><tr><td>void</td><td>removeAttribute(String name);</td><td>通过名称删除应用域对象中的数据</td></tr></tbody></table><h2 id="_6-注解开发入门案例" tabindex="-1">6 注解开发入门案例 <a class="header-anchor" href="#_6-注解开发入门案例" aria-label="Permalink to &quot;6 注解开发入门案例&quot;">​</a></h2><h3 id="_6-1-删除web-xml" tabindex="-1">6.1 删除web.xml <a class="header-anchor" href="#_6-1-删除web-xml" aria-label="Permalink to &quot;6.1 删除web.xml&quot;">​</a></h3><p>直接编写代码就好了</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/webDemo&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class WebServletDemo extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        doPost(req, resp);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(&quot;servlet 注解执行完成&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="webservlet注解" tabindex="-1">@WebServlet注解 <a class="header-anchor" href="#webservlet注解" aria-label="Permalink to &quot;@WebServlet注解&quot;">​</a></h3><p>在 Servlet 中，web.xml 扮演的角色十分的重要，它可以将所有的 Servlet 的配置集中进行管理，但是若项目中 Servelt 数量较多时，web.xml 的配置会变得十分的冗长。这种情况下，注解（Annotation）就是一种更好的选择。</p><p>为了简化 Servlet 的配置，Servlet 3.0 中增加了注解支持，例如：@WebServlet、@WebInitParm 、@WebFilter 和 @WebLitener 等，这使得 web.xml 从 Servlet 3.0 开始不再是必选项了。下面我们对 @WebServlet 进行介绍。</p><h3 id="webservlet-注解的属性" tabindex="-1">@WebServlet 注解的属性 <a class="header-anchor" href="#webservlet-注解的属性" aria-label="Permalink to &quot;@WebServlet 注解的属性&quot;">​</a></h3><p>@WebServlet 用于将一个类声明为 Servlet，该注解会在部署时被容器处理，容器根据其具体的属性配置将相应的类部署为 Servlet。该注解具有下表给出的一些常用属性。</p><table><thead><tr><th>属性名</th><th>类型</th><th>标签</th><th>描述</th><th>是否必需</th></tr></thead><tbody><tr><td>name</td><td>String</td><td><code>&lt;servlet-name&gt;</code></td><td>指定 Servlet 的 name 属性。 如果没有显式指定，则取值为该 Servlet 的完全限定名，即包名+类名。</td><td>否</td></tr><tr><td>value</td><td>String[ ]</td><td><code>&lt;url-pattern&gt;</code></td><td>该属性等价于 urlPatterns 属性，两者不能同时指定。 如果同时指定，通常是忽略 value 的取值。</td><td>是</td></tr><tr><td>urlPatterns</td><td>String[ ]</td><td><code>&lt;url-pattern&gt;</code></td><td>指定一组 Servlet 的 URL 匹配模式。</td><td>是</td></tr><tr><td>loadOnStartup</td><td>int</td><td><code>&lt;load-on-startup&gt;</code></td><td>指定 Servlet 的加载顺序。</td><td>否</td></tr><tr><td>initParams</td><td>WebInitParam[ ]</td><td><code>&lt;init-param&gt;</code></td><td>指定一组 Servlet 初始化参数。</td><td>否</td></tr><tr><td>description</td><td>String</td><td><code>&lt;description&gt;</code></td><td>指定该 Servlet 的描述信息。</td><td>否</td></tr><tr><td>displayName</td><td>String</td><td><code>&lt;display-name&gt;</code></td><td>指定该 Servlet 的显示名。</td><td>否</td></tr></tbody></table><h2 id="_7-request-response" tabindex="-1">7 Request&amp;Response <a class="header-anchor" href="#_7-request-response" aria-label="Permalink to &quot;7 Request&amp;Response&quot;">​</a></h2><h3 id="_7-1-httpservletresponse响应对象概述" tabindex="-1">7.1 HttpServletResponse响应对象概述 <a class="header-anchor" href="#_7-1-httpservletresponse响应对象概述" aria-label="Permalink to &quot;7.1 HttpServletResponse响应对象概述&quot;">​</a></h3><blockquote><p>在 Servlet API 中，定义了一个 HttpServletResponse 接口，它继承自 ServletResponse 接口。HttpServletResponse 对象专门用来封装 HTTP 响应消息，简称 response 对象。</p><p>Servlet 容器会针对每次请求创建一个 response 对象，并把它作为参数传递给 Servlet 的 service 方法。Servlet 处理请求后，会将响应信息封装到 response 对象中，并由容器解析后返回给客户端。</p></blockquote><h3 id="_7-2-关于响应" tabindex="-1">7.2 关于响应 <a class="header-anchor" href="#_7-2-关于响应" aria-label="Permalink to &quot;7.2 关于响应&quot;">​</a></h3><blockquote><p>响应，它表示了服务器端收到请求，同时也已经处理完成，把处理的结果告知用户。简单来说，指的就是服务器把请求的处理结果告知客户端。在B/S架构中，响应就是把结果带回浏览器。</p></blockquote><p>响应对象，顾名思义就是用于在JavaWeb工程中实现上述功能的对象。</p><h3 id="_7-2-1-响应行相关的方法" tabindex="-1">7.2.1 响应行相关的方法 <a class="header-anchor" href="#_7-2-1-响应行相关的方法" aria-label="Permalink to &quot;7.2.1 响应行相关的方法&quot;">​</a></h3><p>当 Servlet 返回响应消息时，需要在响应消息中设置状态码。因此，HttpServletResponse 接口定义了发送状态码的方法，如下表。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>setStatus（int status）</td><td>用于设置 HTTP 响应消息的状态码，并生成响应状态行。</td></tr><tr><td>void</td><td>sendError（int sc）</td><td>用于发送表示错误信息的状态码。</td></tr></tbody></table><h3 id="_7-2-2-响应头相关的方法" tabindex="-1">7.2.2 响应头相关的方法 <a class="header-anchor" href="#_7-2-2-响应头相关的方法" aria-label="Permalink to &quot;7.2.2 响应头相关的方法&quot;">​</a></h3><p>HttpServletResponse 接口中定义了一系列设置 HTTP 响应头字段的方法，如下表所示。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>setHeader (String name,String value)</td><td>用于设置响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值。</td></tr><tr><td>void</td><td>addIntHeader(String name,int value)</td><td>用于增加值为 int 类型的响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值，类型为 int。</td></tr><tr><td>void</td><td>setIntHeader(String name, int value)</td><td>用于设置值为 int 类型的响应头字段，其中，参数 name 用于指定响应头字段的名称，参数 value 用于指定响应头字段的值，类型为 int。</td></tr><tr><td>void</td><td>setContentType(String type)</td><td>用于设置 Servlet 输出内容的 MIME 类型以及编码格式。</td></tr><tr><td>void</td><td>setCharacterEncoding(String charset)</td><td>用于设置输出内容使用的字符编码。</td></tr></tbody></table><h3 id="_7-2-3-响应体相关的方法" tabindex="-1">7.2.3 响应体相关的方法 <a class="header-anchor" href="#_7-2-3-响应体相关的方法" aria-label="Permalink to &quot;7.2.3 响应体相关的方法&quot;">​</a></h3><p>由于在 HTTP 响应消息中，大量的数据都是通过响应消息体传递的。因此 ServletResponse 遵循以 I/O 流传递大量数据的设计理念，在发送响应消息体时，定义了两个与输出流相关的方法。</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ServletOutputStream</td><td>getOutputStream()</td><td>用于获取字节输出流对象。</td></tr><tr><td>PrintWriter</td><td>getWriter()</td><td>用于获取字符输出流对象。</td></tr></tbody></table><h2 id="_7-3-响应对象的使用示例" tabindex="-1">7.3 响应对象的使用示例 <a class="header-anchor" href="#_7-3-响应对象的使用示例" aria-label="Permalink to &quot;7.3 响应对象的使用示例&quot;">​</a></h2><h3 id="_7-3-1-响应-字节流输出及乱码问题" tabindex="-1">7.3.1 响应-字节流输出及乱码问题 <a class="header-anchor" href="#_7-3-1-响应-字节流输出及乱码问题" aria-label="Permalink to &quot;7.3.1 响应-字节流输出及乱码问题&quot;">​</a></h3><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/respDemo&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RespDemo01 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取字节流对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        ServletOutputStream so = resp.getOutputStream();</span></span>
<span class="line"><span style="color:#A6ACCD;">        //准备一个消息</span></span>
<span class="line"><span style="color:#A6ACCD;">        String str=&quot;字节输出流&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setContentType(&quot;text/html;charset=utf-8&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //通过字节输出</span></span>
<span class="line"><span style="color:#A6ACCD;">        so.write(str.getBytes(&quot;utf-8&quot;));</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><h3 id="_7-3-2-响应-字符流输出中文问题" tabindex="-1">7.3.2 响应-字符流输出中文问题 <a class="header-anchor" href="#_7-3-2-响应-字符流输出中文问题" aria-label="Permalink to &quot;7.3.2 响应-字符流输出中文问题&quot;">​</a></h3><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/respDemo2&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RespDemo02 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        //1、获取字符流对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        PrintWriter writer = resp.getWriter();</span></span>
<span class="line"><span style="color:#A6ACCD;">        //2、设置响应正文的字符集</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setContentType(&quot;text/html;charSet=UTF-8&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //3、编写预留文字</span></span>
<span class="line"><span style="color:#A6ACCD;">        String str=&quot;使用字符流输出信息&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">        //4、响应输出到控制台</span></span>
<span class="line"><span style="color:#A6ACCD;">        writer.write(str);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><h3 id="_7-3-3-设置响应消息头定时刷新" tabindex="-1">7.3.3 设置响应消息头定时刷新 <a class="header-anchor" href="#_7-3-3-设置响应消息头定时刷新" aria-label="Permalink to &quot;7.3.3 设置响应消息头定时刷新&quot;">​</a></h3><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/respDemo3&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RespDemo03 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        PrintWriter writer = resp.getWriter();</span></span>
<span class="line"><span style="color:#A6ACCD;">        String str=&quot;用户名密码错误，3秒后跳转到登录页面&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">        //设置编码的字符集</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setContentType(&quot;text/html;charSet=UTF-8&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        writer.write(str);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //设置跳转时间</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setHeader(&quot;Refresh&quot;,&quot;3;URL=/ReqResp/login.html&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><h3 id="_7-3-4请求重定向-注意地址栏发生改变。" tabindex="-1">7.3.4请求重定向：注意地址栏发生改变。 <a class="header-anchor" href="#_7-3-4请求重定向-注意地址栏发生改变。" aria-label="Permalink to &quot;7.3.4请求重定向：注意地址栏发生改变。&quot;">​</a></h3><ul><li><p>请求重定向：客户端的一次请求到达后，发现需要借助其他servlet来实现功能</p></li><li><p>特点：浏览器地址栏发生改变，发送两次请求，请求域对象中不能共享数据，可以重定向到其他服务器</p></li><li><p>重定向实现原理</p><ul><li>resp.setStatus(302);</li></ul></li><li><p>设置响应的资源路径（响应到哪里去，通过响应消息头location来指定）</p><ul><li>resp.setHeader(&quot;location&quot;,&quot;/ReqResp/respdemo&quot;);</li></ul></li><li><p>响应对象方法：</p><ul><li>sendRedirect(String name): 指定重定向</li></ul></li></ul><p>使用示例：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/respDemo4&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RespDemo04 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(&quot;respDemo04已经执行&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">       /* //1、设置响应状态码</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setStatus(302);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //2、设置响应资源路径</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setHeader(&quot;location&quot;,&quot;/ReqResp/respDemo5&quot;);*/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        //重定向方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.sendRedirect(req.getContextPath()+&quot;/respDemo5&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        req.setAttribute(&quot;username&quot;,&quot;zhangshan&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><p>另一个类：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/respDemo5&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RespDemo05 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">       resp.getWriter().write(&quot;this is respDemo5&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        Object username = req.getAttribute(&quot;username&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(username);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><h3 id="_7-3-5-响应和消息头组合应用-文件下载" tabindex="-1">7.3.5 响应和消息头组合应用-文件下载 <a class="header-anchor" href="#_7-3-5-响应和消息头组合应用-文件下载" aria-label="Permalink to &quot;7.3.5 响应和消息头组合应用-文件下载&quot;">​</a></h3><p>思路：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">文件下载的思路：</span></span>
<span class="line"><span style="color:#A6ACCD;">     	1.获取文件路径</span></span>
<span class="line"><span style="color:#A6ACCD;">      	2.把文件读到字节输入流中</span></span>
<span class="line"><span style="color:#A6ACCD;">     	3.设置响应消息头支持的类型</span></span>
<span class="line"><span style="color:#A6ACCD;">      	4.告知浏览器，以下载的方式打开（告知浏览器下载文件的MIME类型）</span></span>
<span class="line"><span style="color:#A6ACCD;">      	5.使用响应对象的字节输出流输出到浏览器上</span></span>
<span class="line"><span style="color:#A6ACCD;">      	6.循环读写</span></span>
<span class="line"><span style="color:#A6ACCD;">      	7.释放资源</span></span></code></pre></div><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/respDemo6&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RespDemo06 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        //1、获取文件路径</span></span>
<span class="line"><span style="color:#A6ACCD;">        ServletContext context = getServletContext();</span></span>
<span class="line"><span style="color:#A6ACCD;">        String realPath = context.getRealPath(&quot;/image/typec.jpg&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //把文件读取到字节输入流中</span></span>
<span class="line"><span style="color:#A6ACCD;">        FileInputStream in = new FileInputStream(realPath);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //设置响应消息头</span></span>
<span class="line"><span style="color:#A6ACCD;">        /*</span></span>
<span class="line"><span style="color:#A6ACCD;">        *Content-Type 消息头名称 支持的类型</span></span>
<span class="line"><span style="color:#A6ACCD;">        application/octet-stream 消息参数 应用的类型字节流</span></span>
<span class="line"><span style="color:#A6ACCD;">        */</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setHeader(&quot;Content-Type&quot;,&quot;application/octet-stream&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //设置响应头以下载的方式打开</span></span>
<span class="line"><span style="color:#A6ACCD;">        /*</span></span>
<span class="line"><span style="color:#A6ACCD;">        * Content-Disposition 消息头名称 处理的形式</span></span>
<span class="line"><span style="color:#A6ACCD;">        * attachment;filename 消息头参数 附件形式进行处理 指定下载文件的名称</span></span>
<span class="line"><span style="color:#A6ACCD;">        * */</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=typec.jpg&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //4、指定输出流</span></span>
<span class="line"><span style="color:#A6ACCD;">        ServletOutputStream os = resp.getOutputStream();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        byte[] bytes=new byte[1024];</span></span>
<span class="line"><span style="color:#A6ACCD;">        int len;</span></span>
<span class="line"><span style="color:#A6ACCD;">        while ((len = in.read(bytes))!=-1){</span></span>
<span class="line"><span style="color:#A6ACCD;">            os.write(bytes,0,len);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        in.close();</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><h2 id="_8-httpservletrequest请求对象" tabindex="-1">8 HttpServletRequest请求对象 <a class="header-anchor" href="#_8-httpservletrequest请求对象" aria-label="Permalink to &quot;8 HttpServletRequest请求对象&quot;">​</a></h2><h3 id="关于请求" tabindex="-1">关于请求 <a class="header-anchor" href="#关于请求" aria-label="Permalink to &quot;关于请求&quot;">​</a></h3><p>请求，顾明思议，就是使用者希望从服务器端索取一些资源，向服务器发出询问。在B/S架构中，就是客户浏览器向服务器发出询问。在我们的JavaEE工程中，客户浏览器发出询问，要遵循HTTP协议所规定的。</p><p>请求对象，就是在JavaEE工程中，用于发送请求的对象。我们常用的对象就是ServletRequest和HttpServletRequest，它们的区别就是是否和HTTP协议有关。</p><h3 id="_8-1-常用方法介绍" tabindex="-1">8.1 常用方法介绍 <a class="header-anchor" href="#_8-1-常用方法介绍" aria-label="Permalink to &quot;8.1 常用方法介绍&quot;">​</a></h3><p>获取请求行信息</p><p>HTTP 请求的请求行中包含请求方法、请求资源名、请求路径等信息，HttpServletRequest 接口定义了一系列获取请求行信息的方法，如下表。</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>getMethod()</td><td>该方法用于获取 HTTP 请求方式（如 GET、POST 等）。</td></tr><tr><td>String</td><td>getRequestURI()</td><td>该方法用于获取请求行中的资源名称部分，即位于 URL 的主机和端口之后，参数部分之前的部分。</td></tr><tr><td>String</td><td>getQueryString()</td><td>该方法用于获取请求行中的参数部分，也就是 URL 中“?”以后的所有内容。</td></tr><tr><td>String</td><td>getContextPath()</td><td>获取虚拟目录的名称</td></tr><tr><td>String</td><td>getServletPath()</td><td>该方法用于获取 Servlet 所映射的路径。</td></tr><tr><td>String</td><td>getRemoteAddr()</td><td>该方法用于获取访问者的 IP 地址。</td></tr><tr><td>String</td><td>getRemoteHost()</td><td>该方法用于获取访问者的完整主机名，如果无法解析出客户机的完整主机名，则该方法将会返回客户端的 IP 地址。</td></tr></tbody></table><p>获取请求头信息</p><p>当浏览器发送请求时，需要通过请求头向服务器传递一些附加信息，例如客户端可以接收的数据类型、压缩方式、语言等。为了获取请求头中的信息， HttpServletRequest 接口定义了一系列用于获取 HTTP 请求头字段的方法，如下表所示。</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>getHeader(String name)</td><td>根据名称获取请求头消息值。</td></tr><tr><td>Enumeration</td><td>getHeaders(String name)</td><td>根据名称获取一个消息头所有的值，一个名称多个值</td></tr><tr><td>Enumeration</td><td>getHeaderNames()</td><td>该方法返回请求头中所有头字段的枚举集合。</td></tr><tr><td>String</td><td>getCharacterEncoding()</td><td>该方法用于返回请求消息的字符集编码 。</td></tr></tbody></table><p>获取 form 表单的数据</p><p>在实际开发中，我们经常需要获取用户提交的表单数据，例如用户名和密码等。为了方便获取表单中的请求参数，ServletRequest 定义了一系列获取请求参数的方法，如下表所示。</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>功能描述</th></tr></thead><tbody><tr><td>String</td><td>getParameter(String name)</td><td>根据名称获取数据</td></tr><tr><td>String [ ]</td><td>getParameterValues (String name)</td><td>根据名称获取所有数据（HTTP 请求中可以有多个相同参数名的参数）。</td></tr><tr><td>Enumeration</td><td>getParameterNames()</td><td>获取请求中所有参数名，枚举类型。</td></tr><tr><td>Map</td><td>getParameterMap()</td><td>获取所有参数的键值对数据（请求中的所有参数名和参数值装入一个 Map 对象中返回）。</td></tr></tbody></table><p>获取请求行信息代码示例</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取请求类型</span></span>
<span class="line"><span style="color:#A6ACCD;">    String method = req.getMethod();</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取统一资源标识符</span></span>
<span class="line"><span style="color:#A6ACCD;">    String requestURI = req.getRequestURI();</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取浏览器输入路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    String requestUrl = req.getRequestURL().toString();</span></span>
<span class="line"><span style="color:#A6ACCD;">    //应用上下文</span></span>
<span class="line"><span style="color:#A6ACCD;">    String contextPath = req.getContextPath();</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取映射路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    String path = req.getServletPath();</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取？ 后面的值</span></span>
<span class="line"><span style="color:#A6ACCD;">    String queryString = req.getQueryString();</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取访问者ip</span></span>
<span class="line"><span style="color:#A6ACCD;">    String remoteAddr = req.getRemoteAddr();</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取完整的主机名</span></span>
<span class="line"><span style="color:#A6ACCD;">    String remoteHost = req.getRemoteHost();</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取来访的端口号</span></span>
<span class="line"><span style="color:#A6ACCD;">    int remotePort = req.getRemotePort();</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;method=&quot;+method);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;requestURI &quot;+requestURI);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;requestUrl &quot;+requestUrl);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;contextPath &quot;+contextPath);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;path &quot;+path);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;remoteAddr &quot;+remoteAddr);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;remoteHost &quot;+remoteHost);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;remotePort &quot;+remotePort);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;queryString &quot;+queryString);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>获取请求头信息</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//根据名称获取请求消息的值 一个名字对应一个值</span></span>
<span class="line"><span style="color:#A6ACCD;">    String value = req.getHeader(&quot;Connection&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(value);</span></span>
<span class="line"><span style="color:#A6ACCD;">    //根据名称获取请求头所有的值  一个名字对应多个值</span></span>
<span class="line"><span style="color:#A6ACCD;">    Enumeration&lt;String&gt; values = req.getHeaders(&quot;Accept-Encoding&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    while (values.hasMoreElements()){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(&quot;getHeaders() &quot;+values.nextElement());</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取所有请求头的名称 枚举类</span></span>
<span class="line"><span style="color:#A6ACCD;">    Enumeration&lt;String&gt; names = req.getHeaderNames();</span></span>
<span class="line"><span style="color:#A6ACCD;">    while (names.hasMoreElements()){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(&quot;getHeaderNames(); &quot;+names.nextElement());</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    //获取字符集</span></span>
<span class="line"><span style="color:#A6ACCD;">    String characterEncoding = req.getCharacterEncoding();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;getCharacterEncoding() &quot;+characterEncoding);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>获取请求参数（form表单）</p><p>准备工作</p><p>创建一个表单页面 register.html</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;title&gt;用户注册&lt;/title&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/head&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;form action=&quot;/ReqResp/reqdemo03&quot; method=&quot;post&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;br/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        密码：&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;br/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        性别：&lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; checked&gt;男</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot;&gt;女</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;br/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;input type=&quot;submit&quot; value=&quot;注册&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/form&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/body&gt;</span></span></code></pre></div><p>获取请求参数示例：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">    //1、根据名称获取数据 getParameter(String name)</span></span>
<span class="line"><span style="color:#A6ACCD;">    String username = req.getParameter(&quot;username&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;用户名是=&quot;+username);</span></span>
<span class="line"><span style="color:#A6ACCD;">    String password = req.getParameter(&quot;password&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;用户密码&quot;+password);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    //2、根据名称获取所有数据 getParameterValues (String name)</span></span>
<span class="line"><span style="color:#A6ACCD;">    String[] genders = req.getParameterValues(&quot;gender&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    for (String gender : genders) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(gender);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">    //3、getParameterNames() 获取请求中所有参数名。</span></span>
<span class="line"><span style="color:#A6ACCD;">    Enumeration&lt;String&gt; names = req.getParameterNames();</span></span>
<span class="line"><span style="color:#A6ACCD;">    while(names.hasMoreElements()){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(&quot;所有的参数名字&quot;+names.nextElement());</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">    //4、getParameterMap()获取所有参数的键值对数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    Map&lt;String, String[]&gt; map = req.getParameterMap();</span></span>
<span class="line"><span style="color:#A6ACCD;">    for(String key:map.keySet()){</span></span>
<span class="line"><span style="color:#A6ACCD;">        String[] str = map.get(key);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.print(str+&quot;:&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        for (String value : str) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            System.out.print(value+&quot; &quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println();</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>封装请求参数到实体类中</p><p>我们通过上面的方法可以获取到请求参数，但是如果参数过多，在进行传递时，方法的形参定义将会变得非常难看。此时我们应该用一个对象来描述这些参数，它就是实体类。这种类的定义，从基础阶段我们就开始使用了。在基础阶段，我们做过一个学生管理系统，用到了一个Student的类，它就是用于描述一个学生的实体类。</p><p>我们现在要做的就是把表单中提交过来的数据填充到实体类中。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">    //1、获取所有数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    String username = req.getParameter(&quot;username&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    String password = req.getParameter(&quot;password&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    String[] genders = req.getParameterValues(&quot;gender&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">    //2、封装到实体对象中</span></span>
<span class="line"><span style="color:#A6ACCD;">    Student stu=new Student();</span></span>
<span class="line"><span style="color:#A6ACCD;">    stu.setUsername(username);</span></span>
<span class="line"><span style="color:#A6ACCD;">    stu.setPassword(password);</span></span>
<span class="line"><span style="color:#A6ACCD;">    stu.setGender(genders);</span></span>
<span class="line"><span style="color:#A6ACCD;">    //输出stu的数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(stu);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>使用apache的commons-beanutils实现封装</p><p>添加jar文件：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;version&gt;1.9.4&lt;/version&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/dependency&gt;</span></span></code></pre></div><p>代码实现：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">  //构建实体对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    Student stu=new Student();</span></span>
<span class="line"><span style="color:#A6ACCD;">//获取键值对数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    Map&lt;String, String[]&gt; map = req.getParameterMap();</span></span>
<span class="line"><span style="color:#A6ACCD;">    try {</span></span>
<span class="line"><span style="color:#A6ACCD;">        BeanUtils.populate(stu,map);</span></span>
<span class="line"><span style="color:#A6ACCD;">    } catch (Exception e) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        e.printStackTrace();</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(&quot;封装后的&quot;+stu.toString());</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="_8-2-请求转发" tabindex="-1">8.2 请求转发 <a class="header-anchor" href="#_8-2-请求转发" aria-label="Permalink to &quot;8.2 请求转发&quot;">​</a></h3><ul><li><p>请求转发：客户端的一次请求到达后，发现需要借助其他servlet来实现</p></li><li><p>特点：</p><ul><li><p>浏览器地址栏不变</p></li><li><p>域对象中的数据不丢失</p></li><li><p>负责转发的servelt转发前后的响应正文会丢失</p></li><li><p>由转发的目的地来响应客户端</p></li></ul></li><li><p>在实际开发中，重定向和请求转发都是我们要用到的响应方式，那么他们有什么区别呢？</p><ul><li><p>请求转发是服务器行为、重定向是客户端浏览器行为</p></li><li><p>请求转发只有一次请求所以可以实现request域对象中的数据共享，而重定向是多次请求、多次响应</p></li><li><p>请求转发url地址栏不变，而重定向会发生变化</p></li></ul></li></ul><p>请求转发的方法：</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>RequestDispatcher</td><td>getRequestDispatcher(String path)</td><td>获取请求调度对象</td></tr><tr><td>void</td><td>forward(ServletRequest request,ServletResponse response)</td><td>用于将请求转发给另一个 Web 资源。该方法必须在响应提交给客户端之前被调用，否则将抛出 IllegalStateException 异常</td></tr></tbody></table><p>转发示例</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/reqdemo05&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RequestDemo05 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">        //1、获取请求调度对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        RequestDispatcher dispatcher = req.getRequestDispatcher(&quot;/reqdemo06&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //给他一个共享的数据</span></span>
<span class="line"><span style="color:#A6ACCD;">        req.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //使用调度对象获取转发方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        dispatcher.forward(req,resp);</span></span></code></pre></div><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/reqdemo06&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RequestDemo06 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">       //获取共享数据</span></span>
<span class="line"><span style="color:#A6ACCD;">        Object username = req.getAttribute(&quot;username&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(username);</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setContentType(&quot;text/html;charSet=UTF-8&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">      resp.getWriter().write(&quot;恭喜你转发成功已到达本类&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><p>请求包含</p><p>在实际开发中，我们可能需要把两个Servlet的内容合并到一起来响应浏览器，而同学们都知道HTTP协议的特点是一请求，一响应的方式。所以绝对不可能出现有两个Servlet同时响应方式。那么我们就需要用到请求包含，把两个Servlet的响应内容合并输出；</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/reqdemo05&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RequestDemo05 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setContentType(&quot;text/html;charSet=UTF-8&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.getWriter().write(&quot;保存好我的账号密码我怕忘记&quot;+&quot;&lt;br/&gt;&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //获取请求调度对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        RequestDispatcher dispatcher = req.getRequestDispatcher(&quot;/reqdemo06&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //给他一个共享的数据</span></span>
<span class="line"><span style="color:#A6ACCD;">        req.setAttribute(&quot;username&quot;,&quot;zhangsan&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //使用调度对象获取转发方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        dispatcher.include(req,resp);</span></span></code></pre></div><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/reqdemo06&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class RequestDemo06 extends HttpServlet {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">       //获取共享数据</span></span>
<span class="line"><span style="color:#A6ACCD;">        Object username = req.getAttribute(&quot;username&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(username);</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.setContentType(&quot;text/html;charSet=UTF-8&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">      resp.getWriter().write(&quot;我已记录你的账号忘记的时候找我拿&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><h3 id="细节问题" tabindex="-1">细节问题 <a class="header-anchor" href="#细节问题" aria-label="Permalink to &quot;细节问题&quot;">​</a></h3><ul><li><p>请求转发的注意事项：负责转发的Servlet，转发前后的响应正文丢失，由转发目的地来响应浏览器。</p></li><li><p>请求包含的注意事项：被包含者的响应消息头丢失。因为它被包含起来了。</p></li></ul>`,226),p=[l];function o(r,c,i,C,D,y){return a(),n("div",null,p)}const u=s(t,[["render",o]]);export{d as __pageData,u as default};
