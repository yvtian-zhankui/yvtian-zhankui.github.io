import{_ as s,o as a,c as n,O as l}from"./chunks/framework.571309da.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/SpringMVC/组件介绍.md","filePath":"guide/SpringMVC/组件介绍.md","lastUpdated":null}'),p={name:"guide/SpringMVC/组件介绍.md"},e=l(`<h3 id="_1-dispatcherservlet" tabindex="-1">1.DispatcherServlet <a class="header-anchor" href="#_1-dispatcherservlet" aria-label="Permalink to &quot;1.DispatcherServlet&quot;">​</a></h3><p>作用：统一收口，接收请求，响应结果，相当于转发器，中央处理器。有了DispatcherServlet减少了其它组件之间的耦合度。</p><h3 id="_2-handlermapping-处理器映射器" tabindex="-1">2.HandlerMapping-处理器映射器 <a class="header-anchor" href="#_2-handlermapping-处理器映射器" aria-label="Permalink to &quot;2.HandlerMapping-处理器映射器&quot;">​</a></h3><p>作用：根据请求的url查找Handler，既负责完成客户请求到 Controller 映射。SpringMVC提供了不同的映射器实现实现不同的映射方式，例如：配置文件方式、实现接口方式、注解方式等。</p><h3 id="_3-handleradapter-处理器适配器" tabindex="-1">3.HandlerAdapter-处理器适配器 <a class="header-anchor" href="#_3-handleradapter-处理器适配器" aria-label="Permalink to &quot;3.HandlerAdapter-处理器适配器&quot;">​</a></h3><p>作用：按照特定规则去执行Handler。</p><h3 id="_4-handler-处理器-也叫-controller" tabindex="-1">4.Handler-处理器 也叫 Controller <a class="header-anchor" href="#_4-handler-处理器-也叫-controller" aria-label="Permalink to &quot;4.Handler-处理器 也叫 Controller&quot;">​</a></h3><p>Handler是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下，Handler对具体的用户请求进行处理。</p><h3 id="_5-视图解析器viewresolver" tabindex="-1">5.视图解析器ViewResolver <a class="header-anchor" href="#_5-视图解析器viewresolver" aria-label="Permalink to &quot;5.视图解析器ViewResolver&quot;">​</a></h3><p>作用：进行视图解析，根据逻辑视图名解析成真正的视图（view）</p><p>ViewResolver负责将处理结果生成View视图，ViewResolver首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面的展示给用户。SpringMVC框架提供了很多View视图类型，包括：JSTLView、freemarkerView、pdfView等等.</p><h3 id="_6-视图view" tabindex="-1">6.视图View <a class="header-anchor" href="#_6-视图view" aria-label="Permalink to &quot;6.视图View&quot;">​</a></h3><p>注意：View是一个接口，实现类支持不同的View类型（jsp、freemarker…），一般情况下需要通过页面标签或者页面模板技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p><blockquote><p>总结： 需要我们开发的工作只有处理器 Handler 的编写以及视图比如JSP页面的编写。</p></blockquote><h2 id="_3-组件配置说明" tabindex="-1">3.组件配置说明 <a class="header-anchor" href="#_3-组件配置说明" aria-label="Permalink to &quot;3.组件配置说明&quot;">​</a></h2><h3 id="_1-配置前端控制器-dispatcherservlet" tabindex="-1">1.配置前端控制器（DispatcherServlet） <a class="header-anchor" href="#_1-配置前端控制器-dispatcherservlet" aria-label="Permalink to &quot;1.配置前端控制器（DispatcherServlet）&quot;">​</a></h3><p>在web project的web.xml中配置：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;"> 配置前端控制器DispatcherServlet </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">springmvc</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">web</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DispatcherServlet</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">springmvc</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xml 是自己创建的SpringMVC全局配置文件，用contextConfigLocation作为参数名来加载 </span></span>
<span class="line"><span style="color:#A6ACCD;">        如果不配置 contextConfigLocation，那么默认加载的是</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">WEB</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">INF</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">servlet名称</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xml，在这里也就是 </span></span>
<span class="line"><span style="color:#A6ACCD;">        springmvc</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xml 参数多个值使用逗号隔开，如：a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xml</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xml </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">contextConfigLocation</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">classpath</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">spring</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xml</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">init</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">param</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">load</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">on</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">startup</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">load</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">on</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">startup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">mapping</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">springmvc</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">servlet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">第一种配置：</span><span style="color:#89DDFF;">*.</span><span style="color:#A6ACCD;">do</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">还可以写</span><span style="color:#89DDFF;">*.</span><span style="color:#A6ACCD;">action等等，表示以</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">do结尾的或者以</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">action结尾的URL都由前端控制器DispatcherServlet来解析 </span></span>
<span class="line"><span style="color:#A6ACCD;">        第二种配置：</span><span style="color:#89DDFF;">/,</span><span style="color:#A6ACCD;">所有访问的 URL 都由DispatcherServlet来解析，但是这里最好配置静态文件不由DispatcherServlet来解析，需要对静态资源单独处理 </span></span>
<span class="line"><span style="color:#A6ACCD;">        错误配置：</span><span style="color:#676E95;font-style:italic;">/*,注意这里是不能这样配置的，因为如果这样写，最后转发到 jsp 页面的时候，仍然会由DispatcherServlet进行解析， 而这时候会找不到对应的Handler，从而报404！！！ --&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;/servlet-mapping&gt;</span></span></code></pre></div><h3 id="_2-配置处理器映射器-handlermapping" tabindex="-1">2.配置处理器映射器（HandlerMapping） <a class="header-anchor" href="#_2-配置处理器映射器-handlermapping" aria-label="Permalink to &quot;2.配置处理器映射器（HandlerMapping）&quot;">​</a></h3><p>在 springmvc.xml 文件中配置。通俗来讲就是请求的 URL 怎么能被 SpringMVC 识别，从而去执行我们编写好的 Handler。</p><p>(1) 第一种方法</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;!-- 配置Handler 通过name的值为url来请求--&gt;   </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;bean name=&quot;/hello2&quot; class=&quot;com.beiyou.controller.HelloController2&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">//Handler</span></span>
<span class="line"><span style="color:#A6ACCD;">//我们的这个controller 就是一个Handler（执行器）</span></span>
<span class="line"><span style="color:#A6ACCD;">public class HelloWord2 implements Controller {</span></span>
<span class="line"><span style="color:#A6ACCD;">    public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception {</span></span>
<span class="line"><span style="color:#A6ACCD;">        ModelAndView mv=new ModelAndView();</span></span>
<span class="line"><span style="color:#A6ACCD;">        //如果xml统一配置路径，可以简写程文件名</span></span>
<span class="line"><span style="color:#A6ACCD;">        mv.setViewName(&quot;success&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        mv.addObject(&quot;msg&quot;,&quot;今天天气很冷&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        return mv;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>这样配置的话，那么请求的 URL，必须为 <a href="http://ip:port/" target="_blank" rel="noreferrer">http://ip:port/</a>项目名/hello</p><p>(2) 第二种方法</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;!-- 配置Handler  通过key值做为url来访问对应的bean--&gt;   </span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;bean id=&quot;hello2&quot; class=&quot;com.beiyou.controller.HelloController2&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;bean id=&quot;hello3&quot; class=&quot;com.beiyou.controller.HelloController2&quot; /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;!-- 简单URL配置处理器映射器 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;property name=&quot;mappings&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;props&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            &lt;prop key=&quot;/hello2&quot;&gt;hello&lt;/prop&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            &lt;prop key=&quot;/hello3&quot;&gt;hello2&lt;/prop&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;/props&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/property&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/bean&gt;</span></span></code></pre></div><p>这种配置请求的 URL可以为 <a href="http://ip:prot/" target="_blank" rel="noreferrer">http://ip:prot/</a>项目名/hello**，或者**<a href="http://ip:port/" target="_blank" rel="noreferrer"><strong>http://ip:port/</strong></a><strong>项目名/hello2</strong></p><h3 id="_3-配置处理器适配器-handleradapter" tabindex="-1">3.配置处理器适配器（HandlerAdapter） <a class="header-anchor" href="#_3-配置处理器适配器-handleradapter" aria-label="Permalink to &quot;3.配置处理器适配器（HandlerAdapter）&quot;">​</a></h3><p>在 springmvc.xml 文件中配置。用来约束我们所需要编码的 Handler类。</p><p><strong>第一种</strong></p><p>编写 Handler 时必须要实现 Controller，否则不能被适配器解析。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;!-- 配置处理器适配器，所有适配器都得实现 HandlerAdapter接口 处理器必须实现controller接口的handler--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot; /&gt;</span></span></code></pre></div><p><em><strong>第二种</strong></em></p><p>编写 Handler 时必须要实现 HttpRequestHandler</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;!-- 配置处理器适配器第二种方法，这样配置所有Handler都必须实现 HttpRequestHandler接口--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;bean class=&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot; /&gt;</span></span></code></pre></div><p>👋</p><p>1、如果没有指明，则可以同时处理实现Controller接口和HttpRequestHandler接口的handler。</p><p>2、如果指明其中一种，则要求所有的hander类都必须实现对应的接口，否则无法访问。</p><h3 id="_4-处理器-handler-即我们的controller" tabindex="-1">4.处理器（Handler，即我们的Controller） <a class="header-anchor" href="#_4-处理器-handler-即我们的controller" aria-label="Permalink to &quot;4.处理器（Handler，即我们的Controller）&quot;">​</a></h3><p>在 springmvc.xml 文件中配置。通俗来讲，就是请求的 URL 到我们这里所编写的 Handler 类的某个方法进行一些业务逻辑处理。我们在上面讲解了两个处理器适配器来约束 Handler，那么我们就通过上面两种配置分别编写两个 Handler：</p><p><em><strong>(1) 第一种</strong></em></p><p>实现Controller 接口</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//Handler</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//我们的这个controller 就是一个Handler（执行器）</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloWord</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Controller</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ModelAndView</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleRequest</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">HttpServletRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">httpServletRequest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletResponse</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">httpServletResponse</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ModelAndView</span><span style="color:#A6ACCD;"> mv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ModelAndView</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//如果xml统一配置路径，可以简写程文件名</span></span>
<span class="line"><span style="color:#A6ACCD;">        mv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setViewName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        mv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addObject</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">今天天气很冷</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> mv</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>(2) 第二种</strong> HttpRequestHandler</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloController2</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HttpRequestHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleRequest</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">HttpServletRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletResponse</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ServletException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">测试数据</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">     request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRequestDispatcher</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/WEB-INF/success.jsp</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">forward</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>⏳ 通常我们使用第一种方式来编写 Handler ，但是第二种如果不需要渲染视图，我们可以通过 response 修改相应内容，比如返回 json 数据：如下图：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCharacterEncoding</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setContentType</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">application/json;charset=utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWriter</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">json字符串</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//controller示例</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloWord2</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HttpRequestHandler</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleRequest</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">HttpServletRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletResponse</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ServletException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">        response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setCharacterEncoding</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setContentType</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">application/json;charset=utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWriter</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">json字符串</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="_5-配置视图解析器-viewresolver" tabindex="-1">5.配置视图解析器（ViewResolver） <a class="header-anchor" href="#_5-配置视图解析器-viewresolver" aria-label="Permalink to &quot;5.配置视图解析器（ViewResolver）&quot;">​</a></h3><p>1.简单配置：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;"> 配置视图解析器 进行jsp解析，默认使用jstl标签，classpath下得有jstl的包</span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">bean class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.springframework.web.servlet.view.InternalResourceViewResolver</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">如果这样配，那么在 Handler 中返回的必须是完整路径（含完整文件名）。</span><span style="color:#89DDFF;">--&gt;</span></span></code></pre></div><p>2.完整配置：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;">配置视图解析器  </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">bean class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">org.springframework.web.servlet.view.InternalResourceViewResolver</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;"> 返回视图页面的前缀 </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">property name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prefix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/WEB-INF/jsp/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#A6ACCD;">property</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;"> 返回页面的后缀 </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">property name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">suffix</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.jsp</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#A6ACCD;">property</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">bean</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>如果这样配，那么在 Handler 中只需要返回在 pages 文件夹下的<strong>jsp 页面</strong>名称就可以了。</p><p>三 基本配置</p><h2 id="_3-1-常规配置-controller加载控制" tabindex="-1">3.1 常规配置（Controller加载控制） <a class="header-anchor" href="#_3-1-常规配置-controller加载控制" aria-label="Permalink to &quot;3.1 常规配置（Controller加载控制）&quot;">​</a></h2><ul><li>SpringMVC的处理器对应的bean必须按照规范格式开发，未避免加入无效的bean可通过bean加载过滤器进行包含设定或排除设定，表现层bean标注通常设定为@Controller</li></ul><p><strong>xml方式</strong></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;context:component-scan base-package=&quot;com.by&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;!--指定包扫描的包含controller--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;context:include-filter</span></span>
<span class="line"><span style="color:#A6ACCD;">                            type=&quot;annotation&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                            expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;!--开启注解扫描--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/context:component-scan&gt;</span></span></code></pre></div><p><strong>context:include-filter</strong>有两个必须的属性：</p><p><strong>type:</strong> 配置filter的类型，这个类型一共有以下五个值：</p><blockquote><p>assignable --- 指定扫描某个接口派生出来的类annotation --- 指定扫描使用某个注解的类aspectj --- 指定扫描AspectJ表达式相匹配的类custom-指定扫描自定义的实现了</p></blockquote><p><strong>expression:</strong> 根据type的不同，这个表达式的配置方式也不同。</p><p><strong>1、assignable 的用法</strong></p><p>创建接口类：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//标签</span></span>
<span class="line"><span style="color:#A6ACCD;">public interface Label {</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>Seller类： 注意，我们在Seller类上方添加了标准注解@Component,所以Seller类会被spring加载</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//供应商</span></span>
<span class="line"><span style="color:#A6ACCD;">@Component</span></span>
<span class="line"><span style="color:#A6ACCD;">public class Seller {</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>ManuFacture类：ManuFacture类没有标注注解，理论上不会被Spring加载。但是ManuFacture类实现了接口Lable</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//厂商</span></span>
<span class="line"><span style="color:#A6ACCD;">public class ManuFacture implements Label{</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><strong>spring-mvc.xml配置</strong></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#A6ACCD;">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span>
<span class="line"><span style="color:#A6ACCD;">        http://www.springframework.org/schema/context</span></span>
<span class="line"><span style="color:#A6ACCD;">       http://www.springframework.org/schema/context/spring-context.xsd</span></span>
<span class="line"><span style="color:#A6ACCD;">        http://www.springframework.org/schema/mvc</span></span>
<span class="line"><span style="color:#A6ACCD;">       http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;context:component-scan base-package=&quot;com.by.pojo&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;!-- 通知spring将实现接口Label的类也加载进来 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;context:include-filter type=&quot;assignable&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                                expression=&quot;com.by.pojo.Label&quot;/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/context:component-scan&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;!--开启注解扫描--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;mvc:annotation-driven/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/beans&gt;</span></span></code></pre></div><p>测试类：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class AppTest {</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        ApplicationContext ac=new ClassPathXmlApplicationContext(&quot;spring-mvc.xml&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(ac.getBean(Seller.class));</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(ac.getBean(ManuFacture.class));</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>加入servlet-api： 使用完删除</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;groupId&gt;tomcat&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;version&gt;5.5.23&lt;/version&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/dependency&gt;</span></span></code></pre></div><p><strong>2、annotation --- 指定扫描使用某个注解的类</strong></p><p>创建一个注解接口类： 类似@Controller</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Target({ElementType.TYPE})</span></span>
<span class="line"><span style="color:#A6ACCD;">@Retention(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#A6ACCD;">public @interface DemoAnno {</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>ManuFacture加上我们配置的注解</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@DemoAnno</span></span>
<span class="line"><span style="color:#A6ACCD;">public class ManuFacture {</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>spring-mvc.xml配置：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;!-- 通知spring将有指定注解的类加载进来 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;context:include-filter type=&quot;annotation&quot; expression=&quot;com.by.pojo.DemoAnno&quot;/&gt;</span></span></code></pre></div><p>测试类不变：直接运行</p><p>**3、aspectj-**指定扫描AspectJ表达式相匹配的类:比如要求加载某个类的派生类</p><p>这里需要添加AspectJ的依赖:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      &lt;version&gt;5.3.20&lt;/version&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;/dependency&gt;</span></span></code></pre></div><p>我们添加一个新的CommBar类：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class CommBar {</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>继续修改我们的ManuFacture类，不实现接口，不需要注解，只要继承CommBar类即可。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class ManuFacture extends CommBar{</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>mvc.xml配置</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;!-- 通知spring所有继承和扩展自指定类的类全部加载进来 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> &lt;context:include-filter type=&quot;aspectj&quot; expression=&quot;com.by.pojo.CommBar+&quot;/&gt;</span></span></code></pre></div><p>直接测试运行</p><p>**4、custom---**指定扫描自定义的实现了org.springframework.core.type.filter.TypeFilter接口的类</p><p>继续修改我们的ManuFacture类，不实现接口，不需要注解，不继承任何类。</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class ManuFacture {</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>我们添加一个MyFilter实现TypeFilter接口:</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">public class MyFilter implements TypeFilter {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    public boolean match(MetadataReader metadataReader,</span></span>
<span class="line"><span style="color:#A6ACCD;">                 MetadataReaderFactory metadataReaderFactory) throws IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        //这里判断读取的类型是否是ManuFacture，如果是就返回true，否则返回false；</span></span>
<span class="line"><span style="color:#A6ACCD;">        // 返回true就会被spring加载，否则不加载</span></span>
<span class="line"><span style="color:#A6ACCD;">     if(metadataReader.getClassMetadata().getClassName().equals(ManuFacture.class.getName())){</span></span>
<span class="line"><span style="color:#A6ACCD;">          return true;</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">        return false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>mvc配置类：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;!-- 通知spring根据我们配置的MyFilter类进行加载 这里的 expression要配置我们自己的MyFilter --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;context:include-filter type=&quot;custom&quot; expression=&quot;com.by.pojo.MyFilter&quot;/&gt;</span></span></code></pre></div><p>直接运行即可</p><p>问题查找网址：<a href="https://kaifa.baidu.com/" target="_blank" rel="noreferrer">https://kaifa.baidu.com</a></p><p><strong>回到之前的配置：</strong></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;context:component-scan base-package=&quot;com.by&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        &lt;!--指定包扫描的包含controller--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;context:include-filter</span></span>
<span class="line"><span style="color:#A6ACCD;">                            type=&quot;annotation&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                            expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;!--开启注解扫描--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/context:component-scan&gt;</span></span></code></pre></div><p><strong>controller中编写：</strong></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Controller</span></span>
<span class="line"><span style="color:#A6ACCD;">public class HelloWord2  {</span></span>
<span class="line"><span style="color:#A6ACCD;">    @RequestMapping(&quot;/hello2&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    public ModelAndView handleRequest() throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        ModelAndView mv=new ModelAndView();</span></span>
<span class="line"><span style="color:#A6ACCD;">        mv.setViewName(&quot;success&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        mv.addObject(&quot;msg&quot;,&quot;给不了的永远都是空的&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        return mv;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><strong>使用 @EnableWebMvc 注解 代替配置</strong></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;mvc:annotation-driven&gt; 和 @EnableWebMvc 解析</span></span>
<span class="line"><span style="color:#A6ACCD;">这两个起到的作用是类似的(避免重复注册,二选一即可), 都是注册了大部分spring mvc开发所需的bean(HandlerMapping,HandlerAdapter等等),</span></span>
<span class="line"><span style="color:#A6ACCD;">还有根据包存在添加messageConverter(例如jackson,以支持@ResponseBody).</span></span></code></pre></div><p><strong>配置类编写</strong></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Configuration</span></span>
<span class="line"><span style="color:#A6ACCD;">//开启 Spring MVC注解驱动</span></span>
<span class="line"><span style="color:#A6ACCD;">@EnableWebMvc</span></span>
<span class="line"><span style="color:#A6ACCD;">public class WebConfig implements WebMvcConfigurer {</span></span>
<span class="line"><span style="color:#A6ACCD;">    /*</span></span>
<span class="line"><span style="color:#A6ACCD;">    配置视图解析器</span></span>
<span class="line"><span style="color:#A6ACCD;">    */</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    public void configureViewResolvers(ViewResolverRegistry registry) {</span></span>
<span class="line"><span style="color:#A6ACCD;">        WebMvcConfigurer.super.configureViewResolvers(registry);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //注册到视图配置中</span></span>
<span class="line"><span style="color:#A6ACCD;">        registry.viewResolver(resourceViewResolver());</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">    /**</span></span>
<span class="line"><span style="color:#A6ACCD;">     * 配置请求视图映射</span></span>
<span class="line"><span style="color:#A6ACCD;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    private InternalResourceViewResolver resourceViewResolver(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        InternalResourceViewResolver viewResolver=new InternalResourceViewResolver();</span></span>
<span class="line"><span style="color:#A6ACCD;">        //请求视图的前缀</span></span>
<span class="line"><span style="color:#A6ACCD;">        viewResolver.setPrefix(&quot;/WEB-INF/&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        //请求视图的后缀</span></span>
<span class="line"><span style="color:#A6ACCD;">        viewResolver.setSuffix(&quot;.jsp&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        return  viewResolver;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p><strong>controller编写：</strong></p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Controller</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloWord3</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/hello3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ModelAndView</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">query</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ModelAndView</span><span style="color:#A6ACCD;"> mv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ModelAndView</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//如果xml统一配置路径，可以简写程文件名</span></span>
<span class="line"><span style="color:#A6ACCD;">        mv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setViewName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        mv</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addObject</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">使用配置类操作</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> mv</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,111),o=[e];function t(r,c,C,i,D,y){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{F as __pageData,u as default};
