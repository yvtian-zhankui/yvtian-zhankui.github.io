import{_ as s,o as n,c as a,O as e}from"./chunks/framework.571309da.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Servlet/Cooike&Session.md","filePath":"guide/Servlet/Cooike&Session.md"}'),p={name:"guide/Servlet/Cooike&Session.md"},l=e(`<p>1 会话技术</p><h2 id="_1-1-会话管理概述" tabindex="-1">1.1 会话管理概述 <a class="header-anchor" href="#_1-1-会话管理概述" aria-label="Permalink to &quot;1.1 会话管理概述&quot;">​</a></h2><h3 id="_1-1-1-什么是会话" tabindex="-1">1.1.1 什么是会话 <a class="header-anchor" href="#_1-1-1-什么是会话" aria-label="Permalink to &quot;1.1.1 什么是会话&quot;">​</a></h3><p>这里的会话，指的是web开发中的一次通话过程，当打开浏览器，访问网站地址后，会话开始，当关闭浏览器（或者到了过期时间），会话结束。</p><p>举个例子：</p><pre><code>例如，你在给家人打电话，这时突然有送外卖的外卖小哥敲门，你放下电话去开门，收完外卖回来后，通话还在保持中，继续说话就行了。
</code></pre><h3 id="_1-1-2-会话管理作用" tabindex="-1">1.1.2 会话管理作用 <a class="header-anchor" href="#_1-1-2-会话管理作用" aria-label="Permalink to &quot;1.1.2 会话管理作用&quot;">​</a></h3><p>什么时候会用到会话管理呢？最常见的就是购物车，当我们登录成功后，把商品加入到购物车之中，此时我们无论再浏览什么商品，当点击购物车时，那些加入的商品都还在购物车中。</p><p>在我们的实际开发中，还有很多地方都离不开会话管理技术。比如，我们在论坛发帖，没有登录的游客身份是不允许发帖的。所以当我们登录成功后，无论我们进入哪个版块发帖，只要权限允许的情况下，服务器都会认识我们，从而让我们发帖，因为登录成功的信息一直保留在服务器端的会话中。</p><p>通过上面的两个例子，我们可以看出，它是为我们共享数据用的，并且是在不同请求间实现数据共享。也就是说，如果我们需要在多次请求间实现数据共享，就可以考虑使用会话管理技术了。</p><h3 id="_1-1-3-会话管理分类" tabindex="-1">1.1.3 会话管理分类 <a class="header-anchor" href="#_1-1-3-会话管理分类" aria-label="Permalink to &quot;1.1.3 会话管理分类&quot;">​</a></h3><p>在JavaEE的项目中，会话管理分为两类。分别是：客户端会话管理技术和服务端会话管理技术。</p><p><strong>客户端会话管理技术</strong></p><pre><code>	它是把要共享的数据保存到了客户端（也就是浏览器端）。每次请求时，把会话信息带到服务器，从而实现多次请求的数据共享。
</code></pre><p><strong>服务端会话管理技术</strong></p><pre><code>	它本质仍是采用客户端会话管理技术，只不过保存到客户端的是一个特殊的标识，并且把要共享的数据保存到了服务端的内存对象中。每次请求时，把这个标识带到服务器端，然后使用这个标识，找到对应的内存空间，从而实现数据共享。
</code></pre><h2 id="_1-2-客户端会话管理技术" tabindex="-1">1.2 客户端会话管理技术 <a class="header-anchor" href="#_1-2-客户端会话管理技术" aria-label="Permalink to &quot;1.2 客户端会话管理技术&quot;">​</a></h2><h3 id="_1-2-1-cookie概述" tabindex="-1">1.2.1 Cookie概述 <a class="header-anchor" href="#_1-2-1-cookie概述" aria-label="Permalink to &quot;1.2.1 Cookie概述&quot;">​</a></h3><p>1）什么是Cookie</p><p>它是客户端浏览器的缓存文件，里面记录了客户浏览器访问网站的一些内容。同时，也是HTTP协议请求和响应消息头的一部分（在HTTP协议课程中，我们备注了它很重要）。</p><p>2）Cookie的API详解</p><p><strong>作用</strong></p><p>它可以保存客户浏览器访问网站的相关内容（需要客户端不禁用Cookie）。从而在每次访问需要同一个内容时，先从本地缓存获取，使资源共享，提高效率。</p><p><strong>Cookie的属性</strong></p><table><thead><tr><th>属性名称</th><th>属性作用</th><th>是否重要</th></tr></thead><tbody><tr><td>name</td><td>cookie的名称</td><td>必要属性</td></tr><tr><td>value</td><td>cookie的值（不能是中文）</td><td>必要属性</td></tr><tr><td>path</td><td>cookie的路径</td><td>重要</td></tr><tr><td>domain</td><td>cookie的域名</td><td>重要</td></tr><tr><td>maxAge</td><td>cookie的生存时间。</td><td>重要</td></tr><tr><td>version</td><td>cookie的版本号。</td><td>不重要</td></tr><tr><td>comment</td><td>cookie的说明。</td><td>不重要</td></tr></tbody></table><p>3）Cookie涉及的常用方法</p><p><strong>创建Cookie</strong></p><p>通过指定的名称和值构造一个Cookie</p><ul><li><p>Cookie的名称必须遵循RFC 2109规范。这就意味着，它只能包含ASCII字母数字字符，</p></li><li><p>不能包含逗号、分号或空格或以$字符开头。</p></li><li><p>创建后无法更改cookie的名称。</p></li><li><p>该值可以是服务器选择发送的任何内容。</p></li><li><p>它的价值可能只有服务器才感兴趣。</p></li><li><p>创建之后，可以使用setValue方法更改cookie的值Cookie(String name, String value)</p></li></ul><p><strong>向浏览器添加Cookie</strong></p><pre><code>添加Cookie到响应中。此方法可以多次调用，用以添加多个Cookie。

	void  addCookie(Cookie cookie);
</code></pre><p><strong>从服务器端获取Cookie</strong></p><p>Cookie[] getCookies();</p><p>这是HttpServletRequest中的方法。</p><ul><li><p>它返回一个Cookie的数组，包含客户端随此请求发送的所有Cookie对象。</p></li><li><p>如果没有符合规则的cookie，则此方法返回null。</p></li></ul><h3 id="_2-cookie快速入门" tabindex="-1">2 Cookie快速入门 <a class="header-anchor" href="#_2-cookie快速入门" aria-label="Permalink to &quot;2 Cookie快速入门&quot;">​</a></h3><p>1）需求说明</p><p>通过cookie记录最后访问时间，并在浏览器上显示出来</p><p>2）案例目的</p><p>掌握cookie的基本使用，从创建到添加客户端，再从服务器获取</p><p>3）案例步骤</p><p>1、通过响应对象写出一个提示信息</p><p>2、创建cookie对象，指定name和value。</p><p>3、设置最大存活时间</p><p>4、通过响应对象，将cookie对象添加到客户端</p><p>5、通过请求对象获取cookie</p><p>6、写出cookie对象中的访问时间</p><p>4）代码示例</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doGet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">HttpServletRequest</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletResponse</span><span style="color:#A6ACCD;"> resp</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> throws ServletException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> IOException </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//1.通过响应对象写出提示信息</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setContentType</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/html;charset=UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">PrintWriter</span><span style="color:#A6ACCD;"> pw </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWriter</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        pw</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">欢迎访问本网站，您的最后访问时间为：&lt;br&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//2.创建Cookie对象，用于记录最后访问时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Cookie</span><span style="color:#A6ACCD;"> cookie </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Cookie</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">time</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentTimeMillis</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//3.设置最大存活时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//cookie.setMaxAge(3600);</span></span>
<span class="line"><span style="color:#A6ACCD;">    cookie</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setMaxAge</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 立即清除</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//4.将cookie对象添加到客户端</span></span>
<span class="line"><span style="color:#A6ACCD;">    resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addCookie</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cookie</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//5.获取cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Cookie</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getCookies</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Cookie</span><span style="color:#A6ACCD;"> c </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">time</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">//6.获取cookie对象中的value，进行写出</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getValue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">SimpleDateFormat</span><span style="color:#A6ACCD;"> sdf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleDateFormat</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yyyy-MM-dd HH:mm:ss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            pw</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sdf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Long</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parseLong</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">))));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>细节</strong></p><p><strong>数量限制：</strong></p><p>Cookie有大小，个数限制。每个网站最多只能存20个cookie，且大小不能超过4kb。同时，所有网站的cookie总数不超过300个。</p><p><strong>存活时间限制setMaxAge()方法接收数字：</strong></p><p>负整数：当前会话有效，浏览器关闭则清除</p><p>0：立即清除</p><p>正整数：以秒为单位设置存活时间</p><h3 id="cookie路径限制" tabindex="-1">cookie路径限制： <a class="header-anchor" href="#cookie路径限制" aria-label="Permalink to &quot;cookie路径限制：&quot;">​</a></h3><p>第一个类</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/*</span></span>
<span class="line"><span style="color:#A6ACCD;">    Cookie的路径限制</span></span>
<span class="line"><span style="color:#A6ACCD;">    取自第一次访问的资源路径前缀</span></span>
<span class="line"><span style="color:#A6ACCD;">    只要以这个前缀为开头(包括子级路径)。都能获取到</span></span>
<span class="line"><span style="color:#A6ACCD;">    反之获取不到</span></span>
<span class="line"><span style="color:#A6ACCD;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/servlet/servletDemo02&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class ServletDemo02 extends HttpServlet{</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        //创建Cookie并添加</span></span>
<span class="line"><span style="color:#A6ACCD;">        Cookie cookie = new Cookie(&quot;username&quot;,&quot;zhangsan&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">        cookie.setMaxAge(3600);</span></span>
<span class="line"><span style="color:#A6ACCD;">        resp.addCookie(cookie);</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><p>第二个类</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/*</span></span>
<span class="line"><span style="color:#A6ACCD;">    Cookie的路径限制</span></span>
<span class="line"><span style="color:#A6ACCD;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/servlet/servletDemo03&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class ServletDemo03 extends HttpServlet{</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        //获取Cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">        Cookie[] arr = req.getCookies();</span></span>
<span class="line"><span style="color:#A6ACCD;">        for(Cookie c : arr) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            if(&quot;username&quot;.equals(c.getName())) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                String value = c.getValue();</span></span>
<span class="line"><span style="color:#A6ACCD;">                resp.getWriter().write(value);</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><p>第三个类：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/*</span></span>
<span class="line"><span style="color:#A6ACCD;">    Cookie的路径限制</span></span>
<span class="line"><span style="color:#A6ACCD;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/servlet/aaa/servletDemo04&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class ServletDemo04 extends HttpServlet{</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        //获取Cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">        Cookie[] arr = req.getCookies();</span></span>
<span class="line"><span style="color:#A6ACCD;">        for(Cookie c : arr) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            if(&quot;username&quot;.equals(c.getName())) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                String value = c.getValue();</span></span>
<span class="line"><span style="color:#A6ACCD;">                resp.getWriter().write(value);</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><p>第四个类：</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/*</span></span>
<span class="line"><span style="color:#A6ACCD;">    Cookie的路径限制</span></span>
<span class="line"><span style="color:#A6ACCD;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/bbb/servletDemo05&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class ServletDemo05 extends HttpServlet{</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        //获取Cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">        Cookie[] arr = req.getCookies();</span></span>
<span class="line"><span style="color:#A6ACCD;">        for(Cookie c : arr) {</span></span>
<span class="line"><span style="color:#A6ACCD;">            if(&quot;username&quot;.equals(c.getName())) {</span></span>
<span class="line"><span style="color:#A6ACCD;">                String value = c.getValue();</span></span>
<span class="line"><span style="color:#A6ACCD;">                resp.getWriter().write(value);</span></span>
<span class="line"><span style="color:#A6ACCD;">            }</span></span>
<span class="line"><span style="color:#A6ACCD;">        }</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><h2 id="_1-3-服务端会话管理概述" tabindex="-1">1.3 服务端会话管理概述 <a class="header-anchor" href="#_1-3-服务端会话管理概述" aria-label="Permalink to &quot;1.3 服务端会话管理概述&quot;">​</a></h2><h3 id="_1-3-1-httpsession概述" tabindex="-1">1.3.1 HttpSession概述 <a class="header-anchor" href="#_1-3-1-httpsession概述" aria-label="Permalink to &quot;1.3.1 HttpSession概述&quot;">​</a></h3><p>1）HttpSession对象介绍</p><p>它是Servlet规范中提供的一个接口。该接口的实现由Servlet规范的实现提供商提供。我们使用的是Tomcat服务器，它对Servlet规范进行了实现，所以HttpSession接口的实现由Tomcat提供。该对象用于提供一种通过多个页面请求或访问网站来标识用户并存储有关该用户的信息的方法。简单说它就是一个服务端会话对象，用于存储用户的会话数据。</p><p>同时，它也是Servlet规范中四大域对象之一的会话域对象。并且它也是用于实现数据共享的。但它与我们之前讲解的应用域和请求域是有区别的。</p><p>总结：</p><ul><li><p>HttpSession：服务器端会话管理技术</p></li><li><p>本质也是采用客户端会话管理技术，只不过客户端保存的是一个唯一标识符，而共享的数据保存到了服务端的内存对象中。</p></li><li><p>每次请求时，会将特殊的标识带到服务器端，根据这个标识来找到对应的内存空间，从而实现数据共享</p></li></ul><p>作用：</p><table><thead><tr><th>域对象</th><th>作用范围</th><th>使用场景</th></tr></thead><tbody><tr><td>ServletContext</td><td>整个应用范围</td><td>当前项目中需要数据共享时，可以使用此域对象。</td></tr><tr><td>ServletRequest</td><td>当前请求范围</td><td>在请求或者当前请求转发时需要数据共享可以使用此域对象。</td></tr><tr><td>HttpSession</td><td>会话返回</td><td>在当前会话范围中实现数据共享。它可以在多次请求中实现数据共享。</td></tr></tbody></table><p>2）HttpSession的获取</p><p>获取HttpSession是通过HttpServletRequest接口中的两个方法获取的，如下图所示：</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112vec89568d344e881fcfbb6eff9b82ed45?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzgxMiwiaWF0IjoxNjg4MDM5MDEyLCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnZlYzg5NTY4ZDM0NGU4ODFmY2ZiYjZlZmY5YjgyZWQ0NSJ9.xWPBdP6JTohMC59rJ1qE_O9U7mLlFcJlhYtBkOLRqcE&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>这两个方法的区别：</p><p><img src="https://tcs-devops.aliyuncs.com/storage/112v2ba5433dbe083e18218b4af5952f54a5?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9hcHBJZCI6IjVlNzQ4MmQ2MjE1MjJiZDVjN2Y5YjMzNSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY4ODY0MzgxMiwiaWF0IjoxNjg4MDM5MDEyLCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzExMnYyYmE1NDMzZGJlMDgzZTE4MjE4YjRhZjU5NTJmNTRhNSJ9.rHh6N_CRdhJcqJUc4PdPqBGbnXG-S2gqYsn_gqBruJs&amp;download=%E5%9B%BE%E7%89%87.png" alt=""></p><p>3）HttpSession获取方法</p><table><thead><tr><th>返回值</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>HttpSession</td><td>getSession()</td><td>获取HttpSession</td></tr><tr><td>HttpSession</td><td>getSession（boolean create）</td><td>获取HttpSession 获取到就自动创建</td></tr></tbody></table><p>4）HttpSession的常用方法</p><table><thead><tr><th>返回值</th><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void</td><td>setAttribute(String var1, Object var2);</td><td>设置共享数据</td></tr><tr><td>Object</td><td>getAttribute(String var1）</td><td>获取共享数据</td></tr><tr><td>void</td><td>removeAttribute(String var1）</td><td>移除共享数据</td></tr><tr><td>String</td><td>getid（）</td><td>获取唯一标识</td></tr><tr><td>void</td><td>invalidate();</td><td>让session立即失效</td></tr></tbody></table><h3 id="_1-3-2-httpsession的入门案例" tabindex="-1">1.3.2 HttpSession的入门案例 <a class="header-anchor" href="#_1-3-2-httpsession的入门案例" aria-label="Permalink to &quot;1.3.2 HttpSession的入门案例&quot;">​</a></h3><p>1）需求说明</p><p>通过第一个Servlet设置共享数据用户名，并在第二个Servlet获取到</p><p>2）案例目的</p><p>通过本案例的讲解，同学们可以清楚的认识到会话域的作用，即多次请求间的数据共享。因为是两次请求，请求域肯定不一样了，所以不能用请求域实现。</p><p>最终掌握HttpSession对象的获取和使用。</p><p>3）实现步骤</p><p>1.获取请求的用户名</p><p>2.获取HttpSession的对象</p><p>3.将用户名信息添加到共享数据中</p><p>4.在第二个Servlet中获取HttpSession对象</p><p>5.获取共享数据用户名</p><p>6.将获取的用户名响应给客户端浏览器</p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/servletDemo01&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class ServletDemo01 extends HttpServlet{</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        //1.获取请求的用户名</span></span>
<span class="line"><span style="color:#A6ACCD;">        String username = req.getParameter(&quot;username&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">   //2.获取HttpSession的对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    HttpSession session = req.getSession();</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(session);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System.out.println(session.getId());</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    //3.将用户名信息添加到共享数据中</span></span>
<span class="line"><span style="color:#A6ACCD;">    session.setAttribute(&quot;username&quot;,username);</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@WebServlet(&quot;/servletDemo02&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">public class ServletDemo02 extends HttpServlet{</span></span>
<span class="line"><span style="color:#A6ACCD;">    @Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">        //1.获取HttpSession对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        HttpSession session = req.getSession();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(session);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(session.getId());</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    //2.获取共享数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    Object username = session.getAttribute(&quot;username&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    //3.将数据响应给浏览器</span></span>
<span class="line"><span style="color:#A6ACCD;">    resp.getWriter().write(username+&quot;&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>3）原理分析</p><p>HttpSession，它虽然是服务端会话管理技术的对象，但它本质仍是一个Cookie。是一个由服务器自动创建的特殊的Cookie，Cookie的名称就是JSESSIONID，Cookie的值是服务器分配的一个唯一的标识。</p><p>当我们使用HttpSession时，浏览器在没有禁用Cookie的情况下，都会把这个Cookie带到服务器端，然后根据唯一标识去查找对应的HttpSession对象，找到了，我们就可以直接使用了。</p><p>Cookie禁用演示：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Cookie的禁用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">WebServlet</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/servletDemo03</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ServletDemo03</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HttpServlet</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">protected</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doGet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">HttpServletRequest</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">HttpServletResponse</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">resp</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ServletException</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">IOException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//1.获取HttpSession对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">HttpSession</span><span style="color:#A6ACCD;"> session </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSession</span><span style="color:#89DDFF;">(false);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">session</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">session </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setContentType</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/html;charset=UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWriter</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">为了不影响正常的使用，请不要禁用浏览器的Cookie~</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p><strong>解决方案：</strong></p><pre><code>**说明：**
</code></pre><p>HttpSession，它虽然是服务端会话管理技术的对象，但它本质仍是一个Cookie。是一个由服务器自动创建的特殊的Cookie，Cookie的名称就是JSESSIONID，Cookie的值是服务器分配的一个唯一的标识。</p><p>当我们使用HttpSession时，浏览器在没有禁用Cookie的情况下，都会把这个Cookie带到服务器端，然后根据唯一标识去查找对应的HttpSession对象，找到了，我们就可以直接使用了。下图就是我们入门案例中，HttpSession分配的唯一标识，同学们可以看到两次请求的JSESSIONID的值是一样的：</p><p><strong>session01里面添加一段话</strong></p><div class="language-text"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">@Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {</span></span>
<span class="line"><span style="color:#A6ACCD;">//        1.获取请求的用户名</span></span>
<span class="line"><span style="color:#A6ACCD;">        String username = req.getParameter(&quot;username&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">//        2.获取HttpSession的对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        HttpSession session=req.getSession();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System.out.println(session);</span></span>
<span class="line"><span style="color:#A6ACCD;">//        3.将用户名信息添加到共享数据中</span></span>
<span class="line"><span style="color:#A6ACCD;">       session.setAttribute(&quot;username&quot;,username);</span></span>
<span class="line"><span style="color:#A6ACCD;">       resp.getWriter().write(&quot;&lt;a href=&#39;&quot;+resp.encodeURL(&quot;http://localhost:8080/lomodal/session03&quot;)+&quot;&#39;&gt;go to session03&lt;a/&gt;&quot;);</span></span>
<span class="line"><span style="color:#A6ACCD;">​</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div>`,109),o=[l];function t(r,c,i,C,A,D){return n(),a("div",null,o)}const F=s(p,[["render",t]]);export{d as __pageData,F as default};
